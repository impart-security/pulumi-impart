// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package impart

import (
	"context"
	"reflect"

	"github.com/impart-security/pulumi-impart/sdk/go/impart/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ListItem struct {
	// The list item expiration.
	Expiration *string `pulumi:"expiration"`
	// The list item value.
	Value string `pulumi:"value"`
}

// ListItemInput is an input type that accepts ListItemArgs and ListItemOutput values.
// You can construct a concrete instance of `ListItemInput` via:
//
//	ListItemArgs{...}
type ListItemInput interface {
	pulumi.Input

	ToListItemOutput() ListItemOutput
	ToListItemOutputWithContext(context.Context) ListItemOutput
}

type ListItemArgs struct {
	// The list item expiration.
	Expiration pulumi.StringPtrInput `pulumi:"expiration"`
	// The list item value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ListItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListItem)(nil)).Elem()
}

func (i ListItemArgs) ToListItemOutput() ListItemOutput {
	return i.ToListItemOutputWithContext(context.Background())
}

func (i ListItemArgs) ToListItemOutputWithContext(ctx context.Context) ListItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListItemOutput)
}

// ListItemArrayInput is an input type that accepts ListItemArray and ListItemArrayOutput values.
// You can construct a concrete instance of `ListItemArrayInput` via:
//
//	ListItemArray{ ListItemArgs{...} }
type ListItemArrayInput interface {
	pulumi.Input

	ToListItemArrayOutput() ListItemArrayOutput
	ToListItemArrayOutputWithContext(context.Context) ListItemArrayOutput
}

type ListItemArray []ListItemInput

func (ListItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListItem)(nil)).Elem()
}

func (i ListItemArray) ToListItemArrayOutput() ListItemArrayOutput {
	return i.ToListItemArrayOutputWithContext(context.Background())
}

func (i ListItemArray) ToListItemArrayOutputWithContext(ctx context.Context) ListItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListItemArrayOutput)
}

type ListItemOutput struct{ *pulumi.OutputState }

func (ListItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListItem)(nil)).Elem()
}

func (o ListItemOutput) ToListItemOutput() ListItemOutput {
	return o
}

func (o ListItemOutput) ToListItemOutputWithContext(ctx context.Context) ListItemOutput {
	return o
}

// The list item expiration.
func (o ListItemOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListItem) *string { return v.Expiration }).(pulumi.StringPtrOutput)
}

// The list item value.
func (o ListItemOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ListItem) string { return v.Value }).(pulumi.StringOutput)
}

type ListItemArrayOutput struct{ *pulumi.OutputState }

func (ListItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListItem)(nil)).Elem()
}

func (o ListItemArrayOutput) ToListItemArrayOutput() ListItemArrayOutput {
	return o
}

func (o ListItemArrayOutput) ToListItemArrayOutputWithContext(ctx context.Context) ListItemArrayOutput {
	return o
}

func (o ListItemArrayOutput) Index(i pulumi.IntInput) ListItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListItem {
		return vs[0].([]ListItem)[vs[1].(int)]
	}).(ListItemOutput)
}

type MonitorCondition struct {
	// Greater than, equal to, or less than (should be one of 'gt', 'lt', or 'eq')
	Comparator string `pulumi:"comparator"`
	// In milliseconds, the offset from now() for the time window.
	Delay   int                     `pulumi:"delay"`
	Details MonitorConditionDetails `pulumi:"details"`
	// Number of occurrences that need to execute to have this condition be true.
	Threshold int `pulumi:"threshold"`
	// In milliseconds, the time span from now until when we should be counting events (for example, 60000 is all events in the last minute).
	TimePeriod int `pulumi:"timePeriod"`
}

// MonitorConditionInput is an input type that accepts MonitorConditionArgs and MonitorConditionOutput values.
// You can construct a concrete instance of `MonitorConditionInput` via:
//
//	MonitorConditionArgs{...}
type MonitorConditionInput interface {
	pulumi.Input

	ToMonitorConditionOutput() MonitorConditionOutput
	ToMonitorConditionOutputWithContext(context.Context) MonitorConditionOutput
}

type MonitorConditionArgs struct {
	// Greater than, equal to, or less than (should be one of 'gt', 'lt', or 'eq')
	Comparator pulumi.StringInput `pulumi:"comparator"`
	// In milliseconds, the offset from now() for the time window.
	Delay   pulumi.IntInput              `pulumi:"delay"`
	Details MonitorConditionDetailsInput `pulumi:"details"`
	// Number of occurrences that need to execute to have this condition be true.
	Threshold pulumi.IntInput `pulumi:"threshold"`
	// In milliseconds, the time span from now until when we should be counting events (for example, 60000 is all events in the last minute).
	TimePeriod pulumi.IntInput `pulumi:"timePeriod"`
}

func (MonitorConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorCondition)(nil)).Elem()
}

func (i MonitorConditionArgs) ToMonitorConditionOutput() MonitorConditionOutput {
	return i.ToMonitorConditionOutputWithContext(context.Background())
}

func (i MonitorConditionArgs) ToMonitorConditionOutputWithContext(ctx context.Context) MonitorConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConditionOutput)
}

// MonitorConditionArrayInput is an input type that accepts MonitorConditionArray and MonitorConditionArrayOutput values.
// You can construct a concrete instance of `MonitorConditionArrayInput` via:
//
//	MonitorConditionArray{ MonitorConditionArgs{...} }
type MonitorConditionArrayInput interface {
	pulumi.Input

	ToMonitorConditionArrayOutput() MonitorConditionArrayOutput
	ToMonitorConditionArrayOutputWithContext(context.Context) MonitorConditionArrayOutput
}

type MonitorConditionArray []MonitorConditionInput

func (MonitorConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorCondition)(nil)).Elem()
}

func (i MonitorConditionArray) ToMonitorConditionArrayOutput() MonitorConditionArrayOutput {
	return i.ToMonitorConditionArrayOutputWithContext(context.Background())
}

func (i MonitorConditionArray) ToMonitorConditionArrayOutputWithContext(ctx context.Context) MonitorConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConditionArrayOutput)
}

type MonitorConditionOutput struct{ *pulumi.OutputState }

func (MonitorConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorCondition)(nil)).Elem()
}

func (o MonitorConditionOutput) ToMonitorConditionOutput() MonitorConditionOutput {
	return o
}

func (o MonitorConditionOutput) ToMonitorConditionOutputWithContext(ctx context.Context) MonitorConditionOutput {
	return o
}

// Greater than, equal to, or less than (should be one of 'gt', 'lt', or 'eq')
func (o MonitorConditionOutput) Comparator() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorCondition) string { return v.Comparator }).(pulumi.StringOutput)
}

// In milliseconds, the offset from now() for the time window.
func (o MonitorConditionOutput) Delay() pulumi.IntOutput {
	return o.ApplyT(func(v MonitorCondition) int { return v.Delay }).(pulumi.IntOutput)
}

func (o MonitorConditionOutput) Details() MonitorConditionDetailsOutput {
	return o.ApplyT(func(v MonitorCondition) MonitorConditionDetails { return v.Details }).(MonitorConditionDetailsOutput)
}

// Number of occurrences that need to execute to have this condition be true.
func (o MonitorConditionOutput) Threshold() pulumi.IntOutput {
	return o.ApplyT(func(v MonitorCondition) int { return v.Threshold }).(pulumi.IntOutput)
}

// In milliseconds, the time span from now until when we should be counting events (for example, 60000 is all events in the last minute).
func (o MonitorConditionOutput) TimePeriod() pulumi.IntOutput {
	return o.ApplyT(func(v MonitorCondition) int { return v.TimePeriod }).(pulumi.IntOutput)
}

type MonitorConditionArrayOutput struct{ *pulumi.OutputState }

func (MonitorConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorCondition)(nil)).Elem()
}

func (o MonitorConditionArrayOutput) ToMonitorConditionArrayOutput() MonitorConditionArrayOutput {
	return o
}

func (o MonitorConditionArrayOutput) ToMonitorConditionArrayOutputWithContext(ctx context.Context) MonitorConditionArrayOutput {
	return o
}

func (o MonitorConditionArrayOutput) Index(i pulumi.IntInput) MonitorConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorCondition {
		return vs[0].([]MonitorCondition)[vs[1].(int)]
	}).(MonitorConditionOutput)
}

type MonitorConditionDetails struct {
	// Strictly for event type monitors. A slug of the action the monitor is tracking.
	Action *string `pulumi:"action"`
	// Strictly for event type monitors. A slug of the actor type the monitor is tracking.
	ActorType *string `pulumi:"actorType"`
	// Strictly for event type monitors. A slug of the subject type the monitor is tracking.
	SubjectType *string `pulumi:"subjectType"`
	// Strictly for metric type monitors. The tag the monitor is tracking.
	Tag *string `pulumi:"tag"`
	// The type of monitor (should be one of 'event' or 'metric'
	Type string `pulumi:"type"`
}

// MonitorConditionDetailsInput is an input type that accepts MonitorConditionDetailsArgs and MonitorConditionDetailsOutput values.
// You can construct a concrete instance of `MonitorConditionDetailsInput` via:
//
//	MonitorConditionDetailsArgs{...}
type MonitorConditionDetailsInput interface {
	pulumi.Input

	ToMonitorConditionDetailsOutput() MonitorConditionDetailsOutput
	ToMonitorConditionDetailsOutputWithContext(context.Context) MonitorConditionDetailsOutput
}

type MonitorConditionDetailsArgs struct {
	// Strictly for event type monitors. A slug of the action the monitor is tracking.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Strictly for event type monitors. A slug of the actor type the monitor is tracking.
	ActorType pulumi.StringPtrInput `pulumi:"actorType"`
	// Strictly for event type monitors. A slug of the subject type the monitor is tracking.
	SubjectType pulumi.StringPtrInput `pulumi:"subjectType"`
	// Strictly for metric type monitors. The tag the monitor is tracking.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The type of monitor (should be one of 'event' or 'metric'
	Type pulumi.StringInput `pulumi:"type"`
}

func (MonitorConditionDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConditionDetails)(nil)).Elem()
}

func (i MonitorConditionDetailsArgs) ToMonitorConditionDetailsOutput() MonitorConditionDetailsOutput {
	return i.ToMonitorConditionDetailsOutputWithContext(context.Background())
}

func (i MonitorConditionDetailsArgs) ToMonitorConditionDetailsOutputWithContext(ctx context.Context) MonitorConditionDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConditionDetailsOutput)
}

type MonitorConditionDetailsOutput struct{ *pulumi.OutputState }

func (MonitorConditionDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConditionDetails)(nil)).Elem()
}

func (o MonitorConditionDetailsOutput) ToMonitorConditionDetailsOutput() MonitorConditionDetailsOutput {
	return o
}

func (o MonitorConditionDetailsOutput) ToMonitorConditionDetailsOutputWithContext(ctx context.Context) MonitorConditionDetailsOutput {
	return o
}

// Strictly for event type monitors. A slug of the action the monitor is tracking.
func (o MonitorConditionDetailsOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConditionDetails) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Strictly for event type monitors. A slug of the actor type the monitor is tracking.
func (o MonitorConditionDetailsOutput) ActorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConditionDetails) *string { return v.ActorType }).(pulumi.StringPtrOutput)
}

// Strictly for event type monitors. A slug of the subject type the monitor is tracking.
func (o MonitorConditionDetailsOutput) SubjectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConditionDetails) *string { return v.SubjectType }).(pulumi.StringPtrOutput)
}

// Strictly for metric type monitors. The tag the monitor is tracking.
func (o MonitorConditionDetailsOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConditionDetails) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The type of monitor (should be one of 'event' or 'metric'
func (o MonitorConditionDetailsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorConditionDetails) string { return v.Type }).(pulumi.StringOutput)
}

type RuleScriptDependenciesDependency struct {
	// IDs of the rule script this rule depends on.
	DependsOnRuleScriptIds []string `pulumi:"dependsOnRuleScriptIds"`
	// The ID of the rule script
	RuleScriptId string `pulumi:"ruleScriptId"`
}

// RuleScriptDependenciesDependencyInput is an input type that accepts RuleScriptDependenciesDependencyArgs and RuleScriptDependenciesDependencyOutput values.
// You can construct a concrete instance of `RuleScriptDependenciesDependencyInput` via:
//
//	RuleScriptDependenciesDependencyArgs{...}
type RuleScriptDependenciesDependencyInput interface {
	pulumi.Input

	ToRuleScriptDependenciesDependencyOutput() RuleScriptDependenciesDependencyOutput
	ToRuleScriptDependenciesDependencyOutputWithContext(context.Context) RuleScriptDependenciesDependencyOutput
}

type RuleScriptDependenciesDependencyArgs struct {
	// IDs of the rule script this rule depends on.
	DependsOnRuleScriptIds pulumi.StringArrayInput `pulumi:"dependsOnRuleScriptIds"`
	// The ID of the rule script
	RuleScriptId pulumi.StringInput `pulumi:"ruleScriptId"`
}

func (RuleScriptDependenciesDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleScriptDependenciesDependency)(nil)).Elem()
}

func (i RuleScriptDependenciesDependencyArgs) ToRuleScriptDependenciesDependencyOutput() RuleScriptDependenciesDependencyOutput {
	return i.ToRuleScriptDependenciesDependencyOutputWithContext(context.Background())
}

func (i RuleScriptDependenciesDependencyArgs) ToRuleScriptDependenciesDependencyOutputWithContext(ctx context.Context) RuleScriptDependenciesDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleScriptDependenciesDependencyOutput)
}

// RuleScriptDependenciesDependencyArrayInput is an input type that accepts RuleScriptDependenciesDependencyArray and RuleScriptDependenciesDependencyArrayOutput values.
// You can construct a concrete instance of `RuleScriptDependenciesDependencyArrayInput` via:
//
//	RuleScriptDependenciesDependencyArray{ RuleScriptDependenciesDependencyArgs{...} }
type RuleScriptDependenciesDependencyArrayInput interface {
	pulumi.Input

	ToRuleScriptDependenciesDependencyArrayOutput() RuleScriptDependenciesDependencyArrayOutput
	ToRuleScriptDependenciesDependencyArrayOutputWithContext(context.Context) RuleScriptDependenciesDependencyArrayOutput
}

type RuleScriptDependenciesDependencyArray []RuleScriptDependenciesDependencyInput

func (RuleScriptDependenciesDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleScriptDependenciesDependency)(nil)).Elem()
}

func (i RuleScriptDependenciesDependencyArray) ToRuleScriptDependenciesDependencyArrayOutput() RuleScriptDependenciesDependencyArrayOutput {
	return i.ToRuleScriptDependenciesDependencyArrayOutputWithContext(context.Background())
}

func (i RuleScriptDependenciesDependencyArray) ToRuleScriptDependenciesDependencyArrayOutputWithContext(ctx context.Context) RuleScriptDependenciesDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleScriptDependenciesDependencyArrayOutput)
}

type RuleScriptDependenciesDependencyOutput struct{ *pulumi.OutputState }

func (RuleScriptDependenciesDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleScriptDependenciesDependency)(nil)).Elem()
}

func (o RuleScriptDependenciesDependencyOutput) ToRuleScriptDependenciesDependencyOutput() RuleScriptDependenciesDependencyOutput {
	return o
}

func (o RuleScriptDependenciesDependencyOutput) ToRuleScriptDependenciesDependencyOutputWithContext(ctx context.Context) RuleScriptDependenciesDependencyOutput {
	return o
}

// IDs of the rule script this rule depends on.
func (o RuleScriptDependenciesDependencyOutput) DependsOnRuleScriptIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleScriptDependenciesDependency) []string { return v.DependsOnRuleScriptIds }).(pulumi.StringArrayOutput)
}

// The ID of the rule script
func (o RuleScriptDependenciesDependencyOutput) RuleScriptId() pulumi.StringOutput {
	return o.ApplyT(func(v RuleScriptDependenciesDependency) string { return v.RuleScriptId }).(pulumi.StringOutput)
}

type RuleScriptDependenciesDependencyArrayOutput struct{ *pulumi.OutputState }

func (RuleScriptDependenciesDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleScriptDependenciesDependency)(nil)).Elem()
}

func (o RuleScriptDependenciesDependencyArrayOutput) ToRuleScriptDependenciesDependencyArrayOutput() RuleScriptDependenciesDependencyArrayOutput {
	return o
}

func (o RuleScriptDependenciesDependencyArrayOutput) ToRuleScriptDependenciesDependencyArrayOutputWithContext(ctx context.Context) RuleScriptDependenciesDependencyArrayOutput {
	return o
}

func (o RuleScriptDependenciesDependencyArrayOutput) Index(i pulumi.IntInput) RuleScriptDependenciesDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleScriptDependenciesDependency {
		return vs[0].([]RuleScriptDependenciesDependency)[vs[1].(int)]
	}).(RuleScriptDependenciesDependencyOutput)
}

type RuleTestCaseAssertion struct {
	// The assertion type of the request.
	AssertionType string `pulumi:"assertionType"`
	// The condition of the assertion.
	// Accepted values per assertion type:
	// **output**: contains, not*contains.
	// **tags**: contains, not*contains.
	// **status_code**: equal, not*equal, greater*than, less*than, one*of.
	// **block**: N/A
	Condition *string `pulumi:"condition"`
	// The description of the assertion.
	Description *string `pulumi:"description"`
	// The expected value of the assertion.
	// It is a string value, and the format it must satisfy depends on the assertion type:
	// **output**: A string.
	// **tags**: A string.
	// **status_code**: An integer value (e.g., "200") or comma-separated list of integers for oneOf condition (e.g., "200,404,500").
	// **block**: A boolean value represented as "true" or "false".
	Expected string `pulumi:"expected"`
	// The location of the assertion. Allowed values: req, res. Not applicable for assertion type output.
	Location *string `pulumi:"location"`
	// The indexes of the messages in the test case the assertion applies to.
	MessageIndexes []float64 `pulumi:"messageIndexes"`
}

// RuleTestCaseAssertionInput is an input type that accepts RuleTestCaseAssertionArgs and RuleTestCaseAssertionOutput values.
// You can construct a concrete instance of `RuleTestCaseAssertionInput` via:
//
//	RuleTestCaseAssertionArgs{...}
type RuleTestCaseAssertionInput interface {
	pulumi.Input

	ToRuleTestCaseAssertionOutput() RuleTestCaseAssertionOutput
	ToRuleTestCaseAssertionOutputWithContext(context.Context) RuleTestCaseAssertionOutput
}

type RuleTestCaseAssertionArgs struct {
	// The assertion type of the request.
	AssertionType pulumi.StringInput `pulumi:"assertionType"`
	// The condition of the assertion.
	// Accepted values per assertion type:
	// **output**: contains, not*contains.
	// **tags**: contains, not*contains.
	// **status_code**: equal, not*equal, greater*than, less*than, one*of.
	// **block**: N/A
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// The description of the assertion.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The expected value of the assertion.
	// It is a string value, and the format it must satisfy depends on the assertion type:
	// **output**: A string.
	// **tags**: A string.
	// **status_code**: An integer value (e.g., "200") or comma-separated list of integers for oneOf condition (e.g., "200,404,500").
	// **block**: A boolean value represented as "true" or "false".
	Expected pulumi.StringInput `pulumi:"expected"`
	// The location of the assertion. Allowed values: req, res. Not applicable for assertion type output.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The indexes of the messages in the test case the assertion applies to.
	MessageIndexes pulumi.Float64ArrayInput `pulumi:"messageIndexes"`
}

func (RuleTestCaseAssertionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTestCaseAssertion)(nil)).Elem()
}

func (i RuleTestCaseAssertionArgs) ToRuleTestCaseAssertionOutput() RuleTestCaseAssertionOutput {
	return i.ToRuleTestCaseAssertionOutputWithContext(context.Background())
}

func (i RuleTestCaseAssertionArgs) ToRuleTestCaseAssertionOutputWithContext(ctx context.Context) RuleTestCaseAssertionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTestCaseAssertionOutput)
}

// RuleTestCaseAssertionArrayInput is an input type that accepts RuleTestCaseAssertionArray and RuleTestCaseAssertionArrayOutput values.
// You can construct a concrete instance of `RuleTestCaseAssertionArrayInput` via:
//
//	RuleTestCaseAssertionArray{ RuleTestCaseAssertionArgs{...} }
type RuleTestCaseAssertionArrayInput interface {
	pulumi.Input

	ToRuleTestCaseAssertionArrayOutput() RuleTestCaseAssertionArrayOutput
	ToRuleTestCaseAssertionArrayOutputWithContext(context.Context) RuleTestCaseAssertionArrayOutput
}

type RuleTestCaseAssertionArray []RuleTestCaseAssertionInput

func (RuleTestCaseAssertionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleTestCaseAssertion)(nil)).Elem()
}

func (i RuleTestCaseAssertionArray) ToRuleTestCaseAssertionArrayOutput() RuleTestCaseAssertionArrayOutput {
	return i.ToRuleTestCaseAssertionArrayOutputWithContext(context.Background())
}

func (i RuleTestCaseAssertionArray) ToRuleTestCaseAssertionArrayOutputWithContext(ctx context.Context) RuleTestCaseAssertionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTestCaseAssertionArrayOutput)
}

type RuleTestCaseAssertionOutput struct{ *pulumi.OutputState }

func (RuleTestCaseAssertionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTestCaseAssertion)(nil)).Elem()
}

func (o RuleTestCaseAssertionOutput) ToRuleTestCaseAssertionOutput() RuleTestCaseAssertionOutput {
	return o
}

func (o RuleTestCaseAssertionOutput) ToRuleTestCaseAssertionOutputWithContext(ctx context.Context) RuleTestCaseAssertionOutput {
	return o
}

// The assertion type of the request.
func (o RuleTestCaseAssertionOutput) AssertionType() pulumi.StringOutput {
	return o.ApplyT(func(v RuleTestCaseAssertion) string { return v.AssertionType }).(pulumi.StringOutput)
}

// The condition of the assertion.
// Accepted values per assertion type:
// **output**: contains, not*contains.
// **tags**: contains, not*contains.
// **status_code**: equal, not*equal, greater*than, less*than, one*of.
// **block**: N/A
func (o RuleTestCaseAssertionOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleTestCaseAssertion) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// The description of the assertion.
func (o RuleTestCaseAssertionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleTestCaseAssertion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The expected value of the assertion.
// It is a string value, and the format it must satisfy depends on the assertion type:
// **output**: A string.
// **tags**: A string.
// **status_code**: An integer value (e.g., "200") or comma-separated list of integers for oneOf condition (e.g., "200,404,500").
// **block**: A boolean value represented as "true" or "false".
func (o RuleTestCaseAssertionOutput) Expected() pulumi.StringOutput {
	return o.ApplyT(func(v RuleTestCaseAssertion) string { return v.Expected }).(pulumi.StringOutput)
}

// The location of the assertion. Allowed values: req, res. Not applicable for assertion type output.
func (o RuleTestCaseAssertionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleTestCaseAssertion) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The indexes of the messages in the test case the assertion applies to.
func (o RuleTestCaseAssertionOutput) MessageIndexes() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v RuleTestCaseAssertion) []float64 { return v.MessageIndexes }).(pulumi.Float64ArrayOutput)
}

type RuleTestCaseAssertionArrayOutput struct{ *pulumi.OutputState }

func (RuleTestCaseAssertionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleTestCaseAssertion)(nil)).Elem()
}

func (o RuleTestCaseAssertionArrayOutput) ToRuleTestCaseAssertionArrayOutput() RuleTestCaseAssertionArrayOutput {
	return o
}

func (o RuleTestCaseAssertionArrayOutput) ToRuleTestCaseAssertionArrayOutputWithContext(ctx context.Context) RuleTestCaseAssertionArrayOutput {
	return o
}

func (o RuleTestCaseAssertionArrayOutput) Index(i pulumi.IntInput) RuleTestCaseAssertionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleTestCaseAssertion {
		return vs[0].([]RuleTestCaseAssertion)[vs[1].(int)]
	}).(RuleTestCaseAssertionOutput)
}

type RuleTestCaseMessage struct {
	// The number of times to include the message in the test case.
	Count *float64 `pulumi:"count"`
	// The delay in milliseconds between message iterations.
	Delay *float64 `pulumi:"delay"`
	// The description of the test case message.
	Description *string `pulumi:"description"`
	// The delay in milliseconds after a set of message iterations.
	PostDelay *float64 `pulumi:"postDelay"`
	// A payload sent to the inspector to inspect an HTTP request.
	Req RuleTestCaseMessageReq `pulumi:"req"`
	// A payload sent to the inspector to inspect an HTTP response.
	Res RuleTestCaseMessageRes `pulumi:"res"`
}

// RuleTestCaseMessageInput is an input type that accepts RuleTestCaseMessageArgs and RuleTestCaseMessageOutput values.
// You can construct a concrete instance of `RuleTestCaseMessageInput` via:
//
//	RuleTestCaseMessageArgs{...}
type RuleTestCaseMessageInput interface {
	pulumi.Input

	ToRuleTestCaseMessageOutput() RuleTestCaseMessageOutput
	ToRuleTestCaseMessageOutputWithContext(context.Context) RuleTestCaseMessageOutput
}

type RuleTestCaseMessageArgs struct {
	// The number of times to include the message in the test case.
	Count pulumi.Float64PtrInput `pulumi:"count"`
	// The delay in milliseconds between message iterations.
	Delay pulumi.Float64PtrInput `pulumi:"delay"`
	// The description of the test case message.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The delay in milliseconds after a set of message iterations.
	PostDelay pulumi.Float64PtrInput `pulumi:"postDelay"`
	// A payload sent to the inspector to inspect an HTTP request.
	Req RuleTestCaseMessageReqInput `pulumi:"req"`
	// A payload sent to the inspector to inspect an HTTP response.
	Res RuleTestCaseMessageResInput `pulumi:"res"`
}

func (RuleTestCaseMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTestCaseMessage)(nil)).Elem()
}

func (i RuleTestCaseMessageArgs) ToRuleTestCaseMessageOutput() RuleTestCaseMessageOutput {
	return i.ToRuleTestCaseMessageOutputWithContext(context.Background())
}

func (i RuleTestCaseMessageArgs) ToRuleTestCaseMessageOutputWithContext(ctx context.Context) RuleTestCaseMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTestCaseMessageOutput)
}

// RuleTestCaseMessageArrayInput is an input type that accepts RuleTestCaseMessageArray and RuleTestCaseMessageArrayOutput values.
// You can construct a concrete instance of `RuleTestCaseMessageArrayInput` via:
//
//	RuleTestCaseMessageArray{ RuleTestCaseMessageArgs{...} }
type RuleTestCaseMessageArrayInput interface {
	pulumi.Input

	ToRuleTestCaseMessageArrayOutput() RuleTestCaseMessageArrayOutput
	ToRuleTestCaseMessageArrayOutputWithContext(context.Context) RuleTestCaseMessageArrayOutput
}

type RuleTestCaseMessageArray []RuleTestCaseMessageInput

func (RuleTestCaseMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleTestCaseMessage)(nil)).Elem()
}

func (i RuleTestCaseMessageArray) ToRuleTestCaseMessageArrayOutput() RuleTestCaseMessageArrayOutput {
	return i.ToRuleTestCaseMessageArrayOutputWithContext(context.Background())
}

func (i RuleTestCaseMessageArray) ToRuleTestCaseMessageArrayOutputWithContext(ctx context.Context) RuleTestCaseMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTestCaseMessageArrayOutput)
}

type RuleTestCaseMessageOutput struct{ *pulumi.OutputState }

func (RuleTestCaseMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTestCaseMessage)(nil)).Elem()
}

func (o RuleTestCaseMessageOutput) ToRuleTestCaseMessageOutput() RuleTestCaseMessageOutput {
	return o
}

func (o RuleTestCaseMessageOutput) ToRuleTestCaseMessageOutputWithContext(ctx context.Context) RuleTestCaseMessageOutput {
	return o
}

// The number of times to include the message in the test case.
func (o RuleTestCaseMessageOutput) Count() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RuleTestCaseMessage) *float64 { return v.Count }).(pulumi.Float64PtrOutput)
}

// The delay in milliseconds between message iterations.
func (o RuleTestCaseMessageOutput) Delay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RuleTestCaseMessage) *float64 { return v.Delay }).(pulumi.Float64PtrOutput)
}

// The description of the test case message.
func (o RuleTestCaseMessageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleTestCaseMessage) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The delay in milliseconds after a set of message iterations.
func (o RuleTestCaseMessageOutput) PostDelay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RuleTestCaseMessage) *float64 { return v.PostDelay }).(pulumi.Float64PtrOutput)
}

// A payload sent to the inspector to inspect an HTTP request.
func (o RuleTestCaseMessageOutput) Req() RuleTestCaseMessageReqOutput {
	return o.ApplyT(func(v RuleTestCaseMessage) RuleTestCaseMessageReq { return v.Req }).(RuleTestCaseMessageReqOutput)
}

// A payload sent to the inspector to inspect an HTTP response.
func (o RuleTestCaseMessageOutput) Res() RuleTestCaseMessageResOutput {
	return o.ApplyT(func(v RuleTestCaseMessage) RuleTestCaseMessageRes { return v.Res }).(RuleTestCaseMessageResOutput)
}

type RuleTestCaseMessageArrayOutput struct{ *pulumi.OutputState }

func (RuleTestCaseMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleTestCaseMessage)(nil)).Elem()
}

func (o RuleTestCaseMessageArrayOutput) ToRuleTestCaseMessageArrayOutput() RuleTestCaseMessageArrayOutput {
	return o
}

func (o RuleTestCaseMessageArrayOutput) ToRuleTestCaseMessageArrayOutputWithContext(ctx context.Context) RuleTestCaseMessageArrayOutput {
	return o
}

func (o RuleTestCaseMessageArrayOutput) Index(i pulumi.IntInput) RuleTestCaseMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleTestCaseMessage {
		return vs[0].([]RuleTestCaseMessage)[vs[1].(int)]
	}).(RuleTestCaseMessageOutput)
}

type RuleTestCaseMessageReq struct {
	// The base64 encoded HTTP request body.
	Body *string `pulumi:"body"`
	// The HTTP request cookie keys.
	CookieKeys []string `pulumi:"cookieKeys"`
	// The HTTP request cookie values.
	CookieValues []string `pulumi:"cookieValues"`
	// The HTTP request header keys.
	HeaderKeys []string `pulumi:"headerKeys"`
	// The HTTP request header values.
	HeaderValues []string `pulumi:"headerValues"`
	// The method of the request.
	Method string `pulumi:"method"`
	// The remote address of the request.
	RemoteAddr *string `pulumi:"remoteAddr"`
	// Indicates whether the request body was truncated.
	TruncatedBody *bool `pulumi:"truncatedBody"`
	// The URL of the request.
	Url string `pulumi:"url"`
}

// RuleTestCaseMessageReqInput is an input type that accepts RuleTestCaseMessageReqArgs and RuleTestCaseMessageReqOutput values.
// You can construct a concrete instance of `RuleTestCaseMessageReqInput` via:
//
//	RuleTestCaseMessageReqArgs{...}
type RuleTestCaseMessageReqInput interface {
	pulumi.Input

	ToRuleTestCaseMessageReqOutput() RuleTestCaseMessageReqOutput
	ToRuleTestCaseMessageReqOutputWithContext(context.Context) RuleTestCaseMessageReqOutput
}

type RuleTestCaseMessageReqArgs struct {
	// The base64 encoded HTTP request body.
	Body pulumi.StringPtrInput `pulumi:"body"`
	// The HTTP request cookie keys.
	CookieKeys pulumi.StringArrayInput `pulumi:"cookieKeys"`
	// The HTTP request cookie values.
	CookieValues pulumi.StringArrayInput `pulumi:"cookieValues"`
	// The HTTP request header keys.
	HeaderKeys pulumi.StringArrayInput `pulumi:"headerKeys"`
	// The HTTP request header values.
	HeaderValues pulumi.StringArrayInput `pulumi:"headerValues"`
	// The method of the request.
	Method pulumi.StringInput `pulumi:"method"`
	// The remote address of the request.
	RemoteAddr pulumi.StringPtrInput `pulumi:"remoteAddr"`
	// Indicates whether the request body was truncated.
	TruncatedBody pulumi.BoolPtrInput `pulumi:"truncatedBody"`
	// The URL of the request.
	Url pulumi.StringInput `pulumi:"url"`
}

func (RuleTestCaseMessageReqArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTestCaseMessageReq)(nil)).Elem()
}

func (i RuleTestCaseMessageReqArgs) ToRuleTestCaseMessageReqOutput() RuleTestCaseMessageReqOutput {
	return i.ToRuleTestCaseMessageReqOutputWithContext(context.Background())
}

func (i RuleTestCaseMessageReqArgs) ToRuleTestCaseMessageReqOutputWithContext(ctx context.Context) RuleTestCaseMessageReqOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTestCaseMessageReqOutput)
}

type RuleTestCaseMessageReqOutput struct{ *pulumi.OutputState }

func (RuleTestCaseMessageReqOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTestCaseMessageReq)(nil)).Elem()
}

func (o RuleTestCaseMessageReqOutput) ToRuleTestCaseMessageReqOutput() RuleTestCaseMessageReqOutput {
	return o
}

func (o RuleTestCaseMessageReqOutput) ToRuleTestCaseMessageReqOutputWithContext(ctx context.Context) RuleTestCaseMessageReqOutput {
	return o
}

// The base64 encoded HTTP request body.
func (o RuleTestCaseMessageReqOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleTestCaseMessageReq) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// The HTTP request cookie keys.
func (o RuleTestCaseMessageReqOutput) CookieKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleTestCaseMessageReq) []string { return v.CookieKeys }).(pulumi.StringArrayOutput)
}

// The HTTP request cookie values.
func (o RuleTestCaseMessageReqOutput) CookieValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleTestCaseMessageReq) []string { return v.CookieValues }).(pulumi.StringArrayOutput)
}

// The HTTP request header keys.
func (o RuleTestCaseMessageReqOutput) HeaderKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleTestCaseMessageReq) []string { return v.HeaderKeys }).(pulumi.StringArrayOutput)
}

// The HTTP request header values.
func (o RuleTestCaseMessageReqOutput) HeaderValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleTestCaseMessageReq) []string { return v.HeaderValues }).(pulumi.StringArrayOutput)
}

// The method of the request.
func (o RuleTestCaseMessageReqOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v RuleTestCaseMessageReq) string { return v.Method }).(pulumi.StringOutput)
}

// The remote address of the request.
func (o RuleTestCaseMessageReqOutput) RemoteAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleTestCaseMessageReq) *string { return v.RemoteAddr }).(pulumi.StringPtrOutput)
}

// Indicates whether the request body was truncated.
func (o RuleTestCaseMessageReqOutput) TruncatedBody() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuleTestCaseMessageReq) *bool { return v.TruncatedBody }).(pulumi.BoolPtrOutput)
}

// The URL of the request.
func (o RuleTestCaseMessageReqOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v RuleTestCaseMessageReq) string { return v.Url }).(pulumi.StringOutput)
}

type RuleTestCaseMessageRes struct {
	// The base64 encoded HTTP response body.
	Body *string `pulumi:"body"`
	// The HTTP response header keys.
	HeaderKeys []string `pulumi:"headerKeys"`
	// The HTTP response header values.
	HeaderValues []string `pulumi:"headerValues"`
	// The HTTP response status code.
	StatusCode float64 `pulumi:"statusCode"`
	// Indicates whether the response body was truncated.
	TruncatedBody *bool `pulumi:"truncatedBody"`
}

// RuleTestCaseMessageResInput is an input type that accepts RuleTestCaseMessageResArgs and RuleTestCaseMessageResOutput values.
// You can construct a concrete instance of `RuleTestCaseMessageResInput` via:
//
//	RuleTestCaseMessageResArgs{...}
type RuleTestCaseMessageResInput interface {
	pulumi.Input

	ToRuleTestCaseMessageResOutput() RuleTestCaseMessageResOutput
	ToRuleTestCaseMessageResOutputWithContext(context.Context) RuleTestCaseMessageResOutput
}

type RuleTestCaseMessageResArgs struct {
	// The base64 encoded HTTP response body.
	Body pulumi.StringPtrInput `pulumi:"body"`
	// The HTTP response header keys.
	HeaderKeys pulumi.StringArrayInput `pulumi:"headerKeys"`
	// The HTTP response header values.
	HeaderValues pulumi.StringArrayInput `pulumi:"headerValues"`
	// The HTTP response status code.
	StatusCode pulumi.Float64Input `pulumi:"statusCode"`
	// Indicates whether the response body was truncated.
	TruncatedBody pulumi.BoolPtrInput `pulumi:"truncatedBody"`
}

func (RuleTestCaseMessageResArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTestCaseMessageRes)(nil)).Elem()
}

func (i RuleTestCaseMessageResArgs) ToRuleTestCaseMessageResOutput() RuleTestCaseMessageResOutput {
	return i.ToRuleTestCaseMessageResOutputWithContext(context.Background())
}

func (i RuleTestCaseMessageResArgs) ToRuleTestCaseMessageResOutputWithContext(ctx context.Context) RuleTestCaseMessageResOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTestCaseMessageResOutput)
}

type RuleTestCaseMessageResOutput struct{ *pulumi.OutputState }

func (RuleTestCaseMessageResOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTestCaseMessageRes)(nil)).Elem()
}

func (o RuleTestCaseMessageResOutput) ToRuleTestCaseMessageResOutput() RuleTestCaseMessageResOutput {
	return o
}

func (o RuleTestCaseMessageResOutput) ToRuleTestCaseMessageResOutputWithContext(ctx context.Context) RuleTestCaseMessageResOutput {
	return o
}

// The base64 encoded HTTP response body.
func (o RuleTestCaseMessageResOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleTestCaseMessageRes) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// The HTTP response header keys.
func (o RuleTestCaseMessageResOutput) HeaderKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleTestCaseMessageRes) []string { return v.HeaderKeys }).(pulumi.StringArrayOutput)
}

// The HTTP response header values.
func (o RuleTestCaseMessageResOutput) HeaderValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleTestCaseMessageRes) []string { return v.HeaderValues }).(pulumi.StringArrayOutput)
}

// The HTTP response status code.
func (o RuleTestCaseMessageResOutput) StatusCode() pulumi.Float64Output {
	return o.ApplyT(func(v RuleTestCaseMessageRes) float64 { return v.StatusCode }).(pulumi.Float64Output)
}

// Indicates whether the response body was truncated.
func (o RuleTestCaseMessageResOutput) TruncatedBody() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuleTestCaseMessageRes) *bool { return v.TruncatedBody }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListItemInput)(nil)).Elem(), ListItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListItemArrayInput)(nil)).Elem(), ListItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorConditionInput)(nil)).Elem(), MonitorConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorConditionArrayInput)(nil)).Elem(), MonitorConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorConditionDetailsInput)(nil)).Elem(), MonitorConditionDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleScriptDependenciesDependencyInput)(nil)).Elem(), RuleScriptDependenciesDependencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleScriptDependenciesDependencyArrayInput)(nil)).Elem(), RuleScriptDependenciesDependencyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTestCaseAssertionInput)(nil)).Elem(), RuleTestCaseAssertionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTestCaseAssertionArrayInput)(nil)).Elem(), RuleTestCaseAssertionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTestCaseMessageInput)(nil)).Elem(), RuleTestCaseMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTestCaseMessageArrayInput)(nil)).Elem(), RuleTestCaseMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTestCaseMessageReqInput)(nil)).Elem(), RuleTestCaseMessageReqArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTestCaseMessageResInput)(nil)).Elem(), RuleTestCaseMessageResArgs{})
	pulumi.RegisterOutputType(ListItemOutput{})
	pulumi.RegisterOutputType(ListItemArrayOutput{})
	pulumi.RegisterOutputType(MonitorConditionOutput{})
	pulumi.RegisterOutputType(MonitorConditionArrayOutput{})
	pulumi.RegisterOutputType(MonitorConditionDetailsOutput{})
	pulumi.RegisterOutputType(RuleScriptDependenciesDependencyOutput{})
	pulumi.RegisterOutputType(RuleScriptDependenciesDependencyArrayOutput{})
	pulumi.RegisterOutputType(RuleTestCaseAssertionOutput{})
	pulumi.RegisterOutputType(RuleTestCaseAssertionArrayOutput{})
	pulumi.RegisterOutputType(RuleTestCaseMessageOutput{})
	pulumi.RegisterOutputType(RuleTestCaseMessageArrayOutput{})
	pulumi.RegisterOutputType(RuleTestCaseMessageReqOutput{})
	pulumi.RegisterOutputType(RuleTestCaseMessageResOutput{})
}
