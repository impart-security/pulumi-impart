// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package impart

import (
	"context"
	"reflect"

	"github.com/impart-security/pulumi-impart/sdk/go/impart/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ListItem struct {
	// The list item expiration.
	Expiration *string `pulumi:"expiration"`
	// The list item value.
	Value string `pulumi:"value"`
}

// ListItemInput is an input type that accepts ListItemArgs and ListItemOutput values.
// You can construct a concrete instance of `ListItemInput` via:
//
//	ListItemArgs{...}
type ListItemInput interface {
	pulumi.Input

	ToListItemOutput() ListItemOutput
	ToListItemOutputWithContext(context.Context) ListItemOutput
}

type ListItemArgs struct {
	// The list item expiration.
	Expiration pulumi.StringPtrInput `pulumi:"expiration"`
	// The list item value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ListItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListItem)(nil)).Elem()
}

func (i ListItemArgs) ToListItemOutput() ListItemOutput {
	return i.ToListItemOutputWithContext(context.Background())
}

func (i ListItemArgs) ToListItemOutputWithContext(ctx context.Context) ListItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListItemOutput)
}

// ListItemArrayInput is an input type that accepts ListItemArray and ListItemArrayOutput values.
// You can construct a concrete instance of `ListItemArrayInput` via:
//
//	ListItemArray{ ListItemArgs{...} }
type ListItemArrayInput interface {
	pulumi.Input

	ToListItemArrayOutput() ListItemArrayOutput
	ToListItemArrayOutputWithContext(context.Context) ListItemArrayOutput
}

type ListItemArray []ListItemInput

func (ListItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListItem)(nil)).Elem()
}

func (i ListItemArray) ToListItemArrayOutput() ListItemArrayOutput {
	return i.ToListItemArrayOutputWithContext(context.Background())
}

func (i ListItemArray) ToListItemArrayOutputWithContext(ctx context.Context) ListItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListItemArrayOutput)
}

type ListItemOutput struct{ *pulumi.OutputState }

func (ListItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListItem)(nil)).Elem()
}

func (o ListItemOutput) ToListItemOutput() ListItemOutput {
	return o
}

func (o ListItemOutput) ToListItemOutputWithContext(ctx context.Context) ListItemOutput {
	return o
}

// The list item expiration.
func (o ListItemOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListItem) *string { return v.Expiration }).(pulumi.StringPtrOutput)
}

// The list item value.
func (o ListItemOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ListItem) string { return v.Value }).(pulumi.StringOutput)
}

type ListItemArrayOutput struct{ *pulumi.OutputState }

func (ListItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListItem)(nil)).Elem()
}

func (o ListItemArrayOutput) ToListItemArrayOutput() ListItemArrayOutput {
	return o
}

func (o ListItemArrayOutput) ToListItemArrayOutputWithContext(ctx context.Context) ListItemArrayOutput {
	return o
}

func (o ListItemArrayOutput) Index(i pulumi.IntInput) ListItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListItem {
		return vs[0].([]ListItem)[vs[1].(int)]
	}).(ListItemOutput)
}

type MonitorCondition struct {
	// Greater than, equal to, or less than (should be one of 'gt', 'lt', or 'eq')
	Comparator string `pulumi:"comparator"`
	// In milliseconds, the offset from now() for the time window.
	Delay   int                     `pulumi:"delay"`
	Details MonitorConditionDetails `pulumi:"details"`
	// Number of occurrences that need to execute to have this condition be true.
	Threshold int `pulumi:"threshold"`
	// In milliseconds, the time span from now until when we should be counting events (for example, 60000 is all events in the last minute).
	TimePeriod int `pulumi:"timePeriod"`
}

// MonitorConditionInput is an input type that accepts MonitorConditionArgs and MonitorConditionOutput values.
// You can construct a concrete instance of `MonitorConditionInput` via:
//
//	MonitorConditionArgs{...}
type MonitorConditionInput interface {
	pulumi.Input

	ToMonitorConditionOutput() MonitorConditionOutput
	ToMonitorConditionOutputWithContext(context.Context) MonitorConditionOutput
}

type MonitorConditionArgs struct {
	// Greater than, equal to, or less than (should be one of 'gt', 'lt', or 'eq')
	Comparator pulumi.StringInput `pulumi:"comparator"`
	// In milliseconds, the offset from now() for the time window.
	Delay   pulumi.IntInput              `pulumi:"delay"`
	Details MonitorConditionDetailsInput `pulumi:"details"`
	// Number of occurrences that need to execute to have this condition be true.
	Threshold pulumi.IntInput `pulumi:"threshold"`
	// In milliseconds, the time span from now until when we should be counting events (for example, 60000 is all events in the last minute).
	TimePeriod pulumi.IntInput `pulumi:"timePeriod"`
}

func (MonitorConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorCondition)(nil)).Elem()
}

func (i MonitorConditionArgs) ToMonitorConditionOutput() MonitorConditionOutput {
	return i.ToMonitorConditionOutputWithContext(context.Background())
}

func (i MonitorConditionArgs) ToMonitorConditionOutputWithContext(ctx context.Context) MonitorConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConditionOutput)
}

// MonitorConditionArrayInput is an input type that accepts MonitorConditionArray and MonitorConditionArrayOutput values.
// You can construct a concrete instance of `MonitorConditionArrayInput` via:
//
//	MonitorConditionArray{ MonitorConditionArgs{...} }
type MonitorConditionArrayInput interface {
	pulumi.Input

	ToMonitorConditionArrayOutput() MonitorConditionArrayOutput
	ToMonitorConditionArrayOutputWithContext(context.Context) MonitorConditionArrayOutput
}

type MonitorConditionArray []MonitorConditionInput

func (MonitorConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorCondition)(nil)).Elem()
}

func (i MonitorConditionArray) ToMonitorConditionArrayOutput() MonitorConditionArrayOutput {
	return i.ToMonitorConditionArrayOutputWithContext(context.Background())
}

func (i MonitorConditionArray) ToMonitorConditionArrayOutputWithContext(ctx context.Context) MonitorConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConditionArrayOutput)
}

type MonitorConditionOutput struct{ *pulumi.OutputState }

func (MonitorConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorCondition)(nil)).Elem()
}

func (o MonitorConditionOutput) ToMonitorConditionOutput() MonitorConditionOutput {
	return o
}

func (o MonitorConditionOutput) ToMonitorConditionOutputWithContext(ctx context.Context) MonitorConditionOutput {
	return o
}

// Greater than, equal to, or less than (should be one of 'gt', 'lt', or 'eq')
func (o MonitorConditionOutput) Comparator() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorCondition) string { return v.Comparator }).(pulumi.StringOutput)
}

// In milliseconds, the offset from now() for the time window.
func (o MonitorConditionOutput) Delay() pulumi.IntOutput {
	return o.ApplyT(func(v MonitorCondition) int { return v.Delay }).(pulumi.IntOutput)
}

func (o MonitorConditionOutput) Details() MonitorConditionDetailsOutput {
	return o.ApplyT(func(v MonitorCondition) MonitorConditionDetails { return v.Details }).(MonitorConditionDetailsOutput)
}

// Number of occurrences that need to execute to have this condition be true.
func (o MonitorConditionOutput) Threshold() pulumi.IntOutput {
	return o.ApplyT(func(v MonitorCondition) int { return v.Threshold }).(pulumi.IntOutput)
}

// In milliseconds, the time span from now until when we should be counting events (for example, 60000 is all events in the last minute).
func (o MonitorConditionOutput) TimePeriod() pulumi.IntOutput {
	return o.ApplyT(func(v MonitorCondition) int { return v.TimePeriod }).(pulumi.IntOutput)
}

type MonitorConditionArrayOutput struct{ *pulumi.OutputState }

func (MonitorConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorCondition)(nil)).Elem()
}

func (o MonitorConditionArrayOutput) ToMonitorConditionArrayOutput() MonitorConditionArrayOutput {
	return o
}

func (o MonitorConditionArrayOutput) ToMonitorConditionArrayOutputWithContext(ctx context.Context) MonitorConditionArrayOutput {
	return o
}

func (o MonitorConditionArrayOutput) Index(i pulumi.IntInput) MonitorConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorCondition {
		return vs[0].([]MonitorCondition)[vs[1].(int)]
	}).(MonitorConditionOutput)
}

type MonitorConditionDetails struct {
	// Strictly for event type monitors. A slug of the action the monitor is tracking.
	Action *string `pulumi:"action"`
	// Strictly for event type monitors. A slug of the actor type the monitor is tracking.
	ActorType *string `pulumi:"actorType"`
	// Strictly for event type monitors. A slug of the subject type the monitor is tracking.
	SubjectType *string `pulumi:"subjectType"`
	// Strictly for metric type monitors. The tag the monitor is tracking.
	Tag *string `pulumi:"tag"`
	// The type of monitor (should be one of 'event' or 'metric'
	Type string `pulumi:"type"`
}

// MonitorConditionDetailsInput is an input type that accepts MonitorConditionDetailsArgs and MonitorConditionDetailsOutput values.
// You can construct a concrete instance of `MonitorConditionDetailsInput` via:
//
//	MonitorConditionDetailsArgs{...}
type MonitorConditionDetailsInput interface {
	pulumi.Input

	ToMonitorConditionDetailsOutput() MonitorConditionDetailsOutput
	ToMonitorConditionDetailsOutputWithContext(context.Context) MonitorConditionDetailsOutput
}

type MonitorConditionDetailsArgs struct {
	// Strictly for event type monitors. A slug of the action the monitor is tracking.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Strictly for event type monitors. A slug of the actor type the monitor is tracking.
	ActorType pulumi.StringPtrInput `pulumi:"actorType"`
	// Strictly for event type monitors. A slug of the subject type the monitor is tracking.
	SubjectType pulumi.StringPtrInput `pulumi:"subjectType"`
	// Strictly for metric type monitors. The tag the monitor is tracking.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The type of monitor (should be one of 'event' or 'metric'
	Type pulumi.StringInput `pulumi:"type"`
}

func (MonitorConditionDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConditionDetails)(nil)).Elem()
}

func (i MonitorConditionDetailsArgs) ToMonitorConditionDetailsOutput() MonitorConditionDetailsOutput {
	return i.ToMonitorConditionDetailsOutputWithContext(context.Background())
}

func (i MonitorConditionDetailsArgs) ToMonitorConditionDetailsOutputWithContext(ctx context.Context) MonitorConditionDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConditionDetailsOutput)
}

type MonitorConditionDetailsOutput struct{ *pulumi.OutputState }

func (MonitorConditionDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConditionDetails)(nil)).Elem()
}

func (o MonitorConditionDetailsOutput) ToMonitorConditionDetailsOutput() MonitorConditionDetailsOutput {
	return o
}

func (o MonitorConditionDetailsOutput) ToMonitorConditionDetailsOutputWithContext(ctx context.Context) MonitorConditionDetailsOutput {
	return o
}

// Strictly for event type monitors. A slug of the action the monitor is tracking.
func (o MonitorConditionDetailsOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConditionDetails) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Strictly for event type monitors. A slug of the actor type the monitor is tracking.
func (o MonitorConditionDetailsOutput) ActorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConditionDetails) *string { return v.ActorType }).(pulumi.StringPtrOutput)
}

// Strictly for event type monitors. A slug of the subject type the monitor is tracking.
func (o MonitorConditionDetailsOutput) SubjectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConditionDetails) *string { return v.SubjectType }).(pulumi.StringPtrOutput)
}

// Strictly for metric type monitors. The tag the monitor is tracking.
func (o MonitorConditionDetailsOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConditionDetails) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The type of monitor (should be one of 'event' or 'metric'
func (o MonitorConditionDetailsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorConditionDetails) string { return v.Type }).(pulumi.StringOutput)
}

type RuleScriptDependenciesDependency struct {
	// IDs of the rule script this rule depends on.
	DependsOnRuleScriptIds []string `pulumi:"dependsOnRuleScriptIds"`
	// The ID of the rule script
	RuleScriptId string `pulumi:"ruleScriptId"`
}

// RuleScriptDependenciesDependencyInput is an input type that accepts RuleScriptDependenciesDependencyArgs and RuleScriptDependenciesDependencyOutput values.
// You can construct a concrete instance of `RuleScriptDependenciesDependencyInput` via:
//
//	RuleScriptDependenciesDependencyArgs{...}
type RuleScriptDependenciesDependencyInput interface {
	pulumi.Input

	ToRuleScriptDependenciesDependencyOutput() RuleScriptDependenciesDependencyOutput
	ToRuleScriptDependenciesDependencyOutputWithContext(context.Context) RuleScriptDependenciesDependencyOutput
}

type RuleScriptDependenciesDependencyArgs struct {
	// IDs of the rule script this rule depends on.
	DependsOnRuleScriptIds pulumi.StringArrayInput `pulumi:"dependsOnRuleScriptIds"`
	// The ID of the rule script
	RuleScriptId pulumi.StringInput `pulumi:"ruleScriptId"`
}

func (RuleScriptDependenciesDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleScriptDependenciesDependency)(nil)).Elem()
}

func (i RuleScriptDependenciesDependencyArgs) ToRuleScriptDependenciesDependencyOutput() RuleScriptDependenciesDependencyOutput {
	return i.ToRuleScriptDependenciesDependencyOutputWithContext(context.Background())
}

func (i RuleScriptDependenciesDependencyArgs) ToRuleScriptDependenciesDependencyOutputWithContext(ctx context.Context) RuleScriptDependenciesDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleScriptDependenciesDependencyOutput)
}

// RuleScriptDependenciesDependencyArrayInput is an input type that accepts RuleScriptDependenciesDependencyArray and RuleScriptDependenciesDependencyArrayOutput values.
// You can construct a concrete instance of `RuleScriptDependenciesDependencyArrayInput` via:
//
//	RuleScriptDependenciesDependencyArray{ RuleScriptDependenciesDependencyArgs{...} }
type RuleScriptDependenciesDependencyArrayInput interface {
	pulumi.Input

	ToRuleScriptDependenciesDependencyArrayOutput() RuleScriptDependenciesDependencyArrayOutput
	ToRuleScriptDependenciesDependencyArrayOutputWithContext(context.Context) RuleScriptDependenciesDependencyArrayOutput
}

type RuleScriptDependenciesDependencyArray []RuleScriptDependenciesDependencyInput

func (RuleScriptDependenciesDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleScriptDependenciesDependency)(nil)).Elem()
}

func (i RuleScriptDependenciesDependencyArray) ToRuleScriptDependenciesDependencyArrayOutput() RuleScriptDependenciesDependencyArrayOutput {
	return i.ToRuleScriptDependenciesDependencyArrayOutputWithContext(context.Background())
}

func (i RuleScriptDependenciesDependencyArray) ToRuleScriptDependenciesDependencyArrayOutputWithContext(ctx context.Context) RuleScriptDependenciesDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleScriptDependenciesDependencyArrayOutput)
}

type RuleScriptDependenciesDependencyOutput struct{ *pulumi.OutputState }

func (RuleScriptDependenciesDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleScriptDependenciesDependency)(nil)).Elem()
}

func (o RuleScriptDependenciesDependencyOutput) ToRuleScriptDependenciesDependencyOutput() RuleScriptDependenciesDependencyOutput {
	return o
}

func (o RuleScriptDependenciesDependencyOutput) ToRuleScriptDependenciesDependencyOutputWithContext(ctx context.Context) RuleScriptDependenciesDependencyOutput {
	return o
}

// IDs of the rule script this rule depends on.
func (o RuleScriptDependenciesDependencyOutput) DependsOnRuleScriptIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleScriptDependenciesDependency) []string { return v.DependsOnRuleScriptIds }).(pulumi.StringArrayOutput)
}

// The ID of the rule script
func (o RuleScriptDependenciesDependencyOutput) RuleScriptId() pulumi.StringOutput {
	return o.ApplyT(func(v RuleScriptDependenciesDependency) string { return v.RuleScriptId }).(pulumi.StringOutput)
}

type RuleScriptDependenciesDependencyArrayOutput struct{ *pulumi.OutputState }

func (RuleScriptDependenciesDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleScriptDependenciesDependency)(nil)).Elem()
}

func (o RuleScriptDependenciesDependencyArrayOutput) ToRuleScriptDependenciesDependencyArrayOutput() RuleScriptDependenciesDependencyArrayOutput {
	return o
}

func (o RuleScriptDependenciesDependencyArrayOutput) ToRuleScriptDependenciesDependencyArrayOutputWithContext(ctx context.Context) RuleScriptDependenciesDependencyArrayOutput {
	return o
}

func (o RuleScriptDependenciesDependencyArrayOutput) Index(i pulumi.IntInput) RuleScriptDependenciesDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleScriptDependenciesDependency {
		return vs[0].([]RuleScriptDependenciesDependency)[vs[1].(int)]
	}).(RuleScriptDependenciesDependencyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListItemInput)(nil)).Elem(), ListItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListItemArrayInput)(nil)).Elem(), ListItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorConditionInput)(nil)).Elem(), MonitorConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorConditionArrayInput)(nil)).Elem(), MonitorConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorConditionDetailsInput)(nil)).Elem(), MonitorConditionDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleScriptDependenciesDependencyInput)(nil)).Elem(), RuleScriptDependenciesDependencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleScriptDependenciesDependencyArrayInput)(nil)).Elem(), RuleScriptDependenciesDependencyArray{})
	pulumi.RegisterOutputType(ListItemOutput{})
	pulumi.RegisterOutputType(ListItemArrayOutput{})
	pulumi.RegisterOutputType(MonitorConditionOutput{})
	pulumi.RegisterOutputType(MonitorConditionArrayOutput{})
	pulumi.RegisterOutputType(MonitorConditionDetailsOutput{})
	pulumi.RegisterOutputType(RuleScriptDependenciesDependencyOutput{})
	pulumi.RegisterOutputType(RuleScriptDependenciesDependencyArrayOutput{})
}
