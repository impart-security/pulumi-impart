// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package impart

import (
	"context"
	"reflect"

	"errors"
	"github.com/impart-security/pulumi-impart/sdk/go/impart/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a core rule configuration.
type CoreRuleConfig struct {
	pulumi.CustomResourceState

	// the core rule configuration.
	Config pulumi.StringOutput `pulumi:"config"`
	// Set true to disable the core rule.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// The slug for the core rule.
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewCoreRuleConfig registers a new resource with the given unique name, arguments, and options.
func NewCoreRuleConfig(ctx *pulumi.Context,
	name string, args *CoreRuleConfigArgs, opts ...pulumi.ResourceOption) (*CoreRuleConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Disabled == nil {
		return nil, errors.New("invalid value for required argument 'Disabled'")
	}
	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CoreRuleConfig
	err := ctx.RegisterResource("impart:index/coreRuleConfig:CoreRuleConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCoreRuleConfig gets an existing CoreRuleConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCoreRuleConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CoreRuleConfigState, opts ...pulumi.ResourceOption) (*CoreRuleConfig, error) {
	var resource CoreRuleConfig
	err := ctx.ReadResource("impart:index/coreRuleConfig:CoreRuleConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CoreRuleConfig resources.
type coreRuleConfigState struct {
	// the core rule configuration.
	Config *string `pulumi:"config"`
	// Set true to disable the core rule.
	Disabled *bool `pulumi:"disabled"`
	// The slug for the core rule.
	Slug *string `pulumi:"slug"`
}

type CoreRuleConfigState struct {
	// the core rule configuration.
	Config pulumi.StringPtrInput
	// Set true to disable the core rule.
	Disabled pulumi.BoolPtrInput
	// The slug for the core rule.
	Slug pulumi.StringPtrInput
}

func (CoreRuleConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*coreRuleConfigState)(nil)).Elem()
}

type coreRuleConfigArgs struct {
	// the core rule configuration.
	Config string `pulumi:"config"`
	// Set true to disable the core rule.
	Disabled bool `pulumi:"disabled"`
	// The slug for the core rule.
	Slug string `pulumi:"slug"`
}

// The set of arguments for constructing a CoreRuleConfig resource.
type CoreRuleConfigArgs struct {
	// the core rule configuration.
	Config pulumi.StringInput
	// Set true to disable the core rule.
	Disabled pulumi.BoolInput
	// The slug for the core rule.
	Slug pulumi.StringInput
}

func (CoreRuleConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*coreRuleConfigArgs)(nil)).Elem()
}

type CoreRuleConfigInput interface {
	pulumi.Input

	ToCoreRuleConfigOutput() CoreRuleConfigOutput
	ToCoreRuleConfigOutputWithContext(ctx context.Context) CoreRuleConfigOutput
}

func (*CoreRuleConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreRuleConfig)(nil)).Elem()
}

func (i *CoreRuleConfig) ToCoreRuleConfigOutput() CoreRuleConfigOutput {
	return i.ToCoreRuleConfigOutputWithContext(context.Background())
}

func (i *CoreRuleConfig) ToCoreRuleConfigOutputWithContext(ctx context.Context) CoreRuleConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreRuleConfigOutput)
}

// CoreRuleConfigArrayInput is an input type that accepts CoreRuleConfigArray and CoreRuleConfigArrayOutput values.
// You can construct a concrete instance of `CoreRuleConfigArrayInput` via:
//
//	CoreRuleConfigArray{ CoreRuleConfigArgs{...} }
type CoreRuleConfigArrayInput interface {
	pulumi.Input

	ToCoreRuleConfigArrayOutput() CoreRuleConfigArrayOutput
	ToCoreRuleConfigArrayOutputWithContext(context.Context) CoreRuleConfigArrayOutput
}

type CoreRuleConfigArray []CoreRuleConfigInput

func (CoreRuleConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreRuleConfig)(nil)).Elem()
}

func (i CoreRuleConfigArray) ToCoreRuleConfigArrayOutput() CoreRuleConfigArrayOutput {
	return i.ToCoreRuleConfigArrayOutputWithContext(context.Background())
}

func (i CoreRuleConfigArray) ToCoreRuleConfigArrayOutputWithContext(ctx context.Context) CoreRuleConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreRuleConfigArrayOutput)
}

// CoreRuleConfigMapInput is an input type that accepts CoreRuleConfigMap and CoreRuleConfigMapOutput values.
// You can construct a concrete instance of `CoreRuleConfigMapInput` via:
//
//	CoreRuleConfigMap{ "key": CoreRuleConfigArgs{...} }
type CoreRuleConfigMapInput interface {
	pulumi.Input

	ToCoreRuleConfigMapOutput() CoreRuleConfigMapOutput
	ToCoreRuleConfigMapOutputWithContext(context.Context) CoreRuleConfigMapOutput
}

type CoreRuleConfigMap map[string]CoreRuleConfigInput

func (CoreRuleConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreRuleConfig)(nil)).Elem()
}

func (i CoreRuleConfigMap) ToCoreRuleConfigMapOutput() CoreRuleConfigMapOutput {
	return i.ToCoreRuleConfigMapOutputWithContext(context.Background())
}

func (i CoreRuleConfigMap) ToCoreRuleConfigMapOutputWithContext(ctx context.Context) CoreRuleConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreRuleConfigMapOutput)
}

type CoreRuleConfigOutput struct{ *pulumi.OutputState }

func (CoreRuleConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreRuleConfig)(nil)).Elem()
}

func (o CoreRuleConfigOutput) ToCoreRuleConfigOutput() CoreRuleConfigOutput {
	return o
}

func (o CoreRuleConfigOutput) ToCoreRuleConfigOutputWithContext(ctx context.Context) CoreRuleConfigOutput {
	return o
}

// the core rule configuration.
func (o CoreRuleConfigOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *CoreRuleConfig) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// Set true to disable the core rule.
func (o CoreRuleConfigOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CoreRuleConfig) pulumi.BoolOutput { return v.Disabled }).(pulumi.BoolOutput)
}

// The slug for the core rule.
func (o CoreRuleConfigOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *CoreRuleConfig) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type CoreRuleConfigArrayOutput struct{ *pulumi.OutputState }

func (CoreRuleConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreRuleConfig)(nil)).Elem()
}

func (o CoreRuleConfigArrayOutput) ToCoreRuleConfigArrayOutput() CoreRuleConfigArrayOutput {
	return o
}

func (o CoreRuleConfigArrayOutput) ToCoreRuleConfigArrayOutputWithContext(ctx context.Context) CoreRuleConfigArrayOutput {
	return o
}

func (o CoreRuleConfigArrayOutput) Index(i pulumi.IntInput) CoreRuleConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CoreRuleConfig {
		return vs[0].([]*CoreRuleConfig)[vs[1].(int)]
	}).(CoreRuleConfigOutput)
}

type CoreRuleConfigMapOutput struct{ *pulumi.OutputState }

func (CoreRuleConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreRuleConfig)(nil)).Elem()
}

func (o CoreRuleConfigMapOutput) ToCoreRuleConfigMapOutput() CoreRuleConfigMapOutput {
	return o
}

func (o CoreRuleConfigMapOutput) ToCoreRuleConfigMapOutputWithContext(ctx context.Context) CoreRuleConfigMapOutput {
	return o
}

func (o CoreRuleConfigMapOutput) MapIndex(k pulumi.StringInput) CoreRuleConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CoreRuleConfig {
		return vs[0].(map[string]*CoreRuleConfig)[vs[1].(string)]
	}).(CoreRuleConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CoreRuleConfigInput)(nil)).Elem(), &CoreRuleConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*CoreRuleConfigArrayInput)(nil)).Elem(), CoreRuleConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CoreRuleConfigMapInput)(nil)).Elem(), CoreRuleConfigMap{})
	pulumi.RegisterOutputType(CoreRuleConfigOutput{})
	pulumi.RegisterOutputType(CoreRuleConfigArrayOutput{})
	pulumi.RegisterOutputType(CoreRuleConfigMapOutput{})
}
