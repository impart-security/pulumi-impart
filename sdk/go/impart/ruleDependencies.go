// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package impart

import (
	"context"
	"reflect"

	"errors"
	"github.com/impart-security/pulumi-impart/sdk/go/impart/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage rule dependencies. There should only ever be one instance of this resource in a workspace at once, because it manages rule dependencies at an organization level.
type RuleDependencies struct {
	pulumi.CustomResourceState

	// An array of rules and the other ids of the rules they depend on before executing.
	Dependencies RuleDependenciesDependencyArrayOutput `pulumi:"dependencies"`
}

// NewRuleDependencies registers a new resource with the given unique name, arguments, and options.
func NewRuleDependencies(ctx *pulumi.Context,
	name string, args *RuleDependenciesArgs, opts ...pulumi.ResourceOption) (*RuleDependencies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dependencies == nil {
		return nil, errors.New("invalid value for required argument 'Dependencies'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuleDependencies
	err := ctx.RegisterResource("impart:index/ruleDependencies:RuleDependencies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleDependencies gets an existing RuleDependencies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleDependencies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleDependenciesState, opts ...pulumi.ResourceOption) (*RuleDependencies, error) {
	var resource RuleDependencies
	err := ctx.ReadResource("impart:index/ruleDependencies:RuleDependencies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleDependencies resources.
type ruleDependenciesState struct {
	// An array of rules and the other ids of the rules they depend on before executing.
	Dependencies []RuleDependenciesDependency `pulumi:"dependencies"`
}

type RuleDependenciesState struct {
	// An array of rules and the other ids of the rules they depend on before executing.
	Dependencies RuleDependenciesDependencyArrayInput
}

func (RuleDependenciesState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleDependenciesState)(nil)).Elem()
}

type ruleDependenciesArgs struct {
	// An array of rules and the other ids of the rules they depend on before executing.
	Dependencies []RuleDependenciesDependency `pulumi:"dependencies"`
}

// The set of arguments for constructing a RuleDependencies resource.
type RuleDependenciesArgs struct {
	// An array of rules and the other ids of the rules they depend on before executing.
	Dependencies RuleDependenciesDependencyArrayInput
}

func (RuleDependenciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleDependenciesArgs)(nil)).Elem()
}

type RuleDependenciesInput interface {
	pulumi.Input

	ToRuleDependenciesOutput() RuleDependenciesOutput
	ToRuleDependenciesOutputWithContext(ctx context.Context) RuleDependenciesOutput
}

func (*RuleDependencies) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleDependencies)(nil)).Elem()
}

func (i *RuleDependencies) ToRuleDependenciesOutput() RuleDependenciesOutput {
	return i.ToRuleDependenciesOutputWithContext(context.Background())
}

func (i *RuleDependencies) ToRuleDependenciesOutputWithContext(ctx context.Context) RuleDependenciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDependenciesOutput)
}

// RuleDependenciesArrayInput is an input type that accepts RuleDependenciesArray and RuleDependenciesArrayOutput values.
// You can construct a concrete instance of `RuleDependenciesArrayInput` via:
//
//	RuleDependenciesArray{ RuleDependenciesArgs{...} }
type RuleDependenciesArrayInput interface {
	pulumi.Input

	ToRuleDependenciesArrayOutput() RuleDependenciesArrayOutput
	ToRuleDependenciesArrayOutputWithContext(context.Context) RuleDependenciesArrayOutput
}

type RuleDependenciesArray []RuleDependenciesInput

func (RuleDependenciesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleDependencies)(nil)).Elem()
}

func (i RuleDependenciesArray) ToRuleDependenciesArrayOutput() RuleDependenciesArrayOutput {
	return i.ToRuleDependenciesArrayOutputWithContext(context.Background())
}

func (i RuleDependenciesArray) ToRuleDependenciesArrayOutputWithContext(ctx context.Context) RuleDependenciesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDependenciesArrayOutput)
}

// RuleDependenciesMapInput is an input type that accepts RuleDependenciesMap and RuleDependenciesMapOutput values.
// You can construct a concrete instance of `RuleDependenciesMapInput` via:
//
//	RuleDependenciesMap{ "key": RuleDependenciesArgs{...} }
type RuleDependenciesMapInput interface {
	pulumi.Input

	ToRuleDependenciesMapOutput() RuleDependenciesMapOutput
	ToRuleDependenciesMapOutputWithContext(context.Context) RuleDependenciesMapOutput
}

type RuleDependenciesMap map[string]RuleDependenciesInput

func (RuleDependenciesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleDependencies)(nil)).Elem()
}

func (i RuleDependenciesMap) ToRuleDependenciesMapOutput() RuleDependenciesMapOutput {
	return i.ToRuleDependenciesMapOutputWithContext(context.Background())
}

func (i RuleDependenciesMap) ToRuleDependenciesMapOutputWithContext(ctx context.Context) RuleDependenciesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDependenciesMapOutput)
}

type RuleDependenciesOutput struct{ *pulumi.OutputState }

func (RuleDependenciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleDependencies)(nil)).Elem()
}

func (o RuleDependenciesOutput) ToRuleDependenciesOutput() RuleDependenciesOutput {
	return o
}

func (o RuleDependenciesOutput) ToRuleDependenciesOutputWithContext(ctx context.Context) RuleDependenciesOutput {
	return o
}

// An array of rules and the other ids of the rules they depend on before executing.
func (o RuleDependenciesOutput) Dependencies() RuleDependenciesDependencyArrayOutput {
	return o.ApplyT(func(v *RuleDependencies) RuleDependenciesDependencyArrayOutput { return v.Dependencies }).(RuleDependenciesDependencyArrayOutput)
}

type RuleDependenciesArrayOutput struct{ *pulumi.OutputState }

func (RuleDependenciesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleDependencies)(nil)).Elem()
}

func (o RuleDependenciesArrayOutput) ToRuleDependenciesArrayOutput() RuleDependenciesArrayOutput {
	return o
}

func (o RuleDependenciesArrayOutput) ToRuleDependenciesArrayOutputWithContext(ctx context.Context) RuleDependenciesArrayOutput {
	return o
}

func (o RuleDependenciesArrayOutput) Index(i pulumi.IntInput) RuleDependenciesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuleDependencies {
		return vs[0].([]*RuleDependencies)[vs[1].(int)]
	}).(RuleDependenciesOutput)
}

type RuleDependenciesMapOutput struct{ *pulumi.OutputState }

func (RuleDependenciesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleDependencies)(nil)).Elem()
}

func (o RuleDependenciesMapOutput) ToRuleDependenciesMapOutput() RuleDependenciesMapOutput {
	return o
}

func (o RuleDependenciesMapOutput) ToRuleDependenciesMapOutputWithContext(ctx context.Context) RuleDependenciesMapOutput {
	return o
}

func (o RuleDependenciesMapOutput) MapIndex(k pulumi.StringInput) RuleDependenciesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuleDependencies {
		return vs[0].(map[string]*RuleDependencies)[vs[1].(string)]
	}).(RuleDependenciesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleDependenciesInput)(nil)).Elem(), &RuleDependencies{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleDependenciesArrayInput)(nil)).Elem(), RuleDependenciesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleDependenciesMapInput)(nil)).Elem(), RuleDependenciesMap{})
	pulumi.RegisterOutputType(RuleDependenciesOutput{})
	pulumi.RegisterOutputType(RuleDependenciesArrayOutput{})
	pulumi.RegisterOutputType(RuleDependenciesMapOutput{})
}
