// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package impart

import (
	"context"
	"reflect"

	"errors"
	"github.com/impart-security/pulumi-impart/sdk/go/impart/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage an notification template.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/impart-security/pulumi-impart/sdk/go/impart"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a new notification template
//			_, err := impart.NewNotificationTemplate(ctx, "example", &impart.NotificationTemplateArgs{
//				Name:        pulumi.String("notification_template_example"),
//				ConnectorId: pulumi.Any(resource.Impart_connector.Example_connector.Id),
//				Payload:     pulumi.String("This is a test message payload"),
//				Subject:     pulumi.String("Test subject"),
//				Destinations: pulumi.StringArray{
//					pulumi.String("test-destination-id"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type NotificationTemplate struct {
	pulumi.CustomResourceState

	// The connector id.
	ConnectorId pulumi.StringOutput `pulumi:"connectorId"`
	// An array of destination ids to which the payloads will be sent.
	Destinations pulumi.StringArrayOutput `pulumi:"destinations"`
	// The name for this notification template.
	Name pulumi.StringOutput `pulumi:"name"`
	// The payload message that will be sent to the Third Party API.
	Payload pulumi.StringOutput `pulumi:"payload"`
	// The subject message that will be sent to the Third Party API.
	Subject pulumi.StringOutput `pulumi:"subject"`
}

// NewNotificationTemplate registers a new resource with the given unique name, arguments, and options.
func NewNotificationTemplate(ctx *pulumi.Context,
	name string, args *NotificationTemplateArgs, opts ...pulumi.ResourceOption) (*NotificationTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorId'")
	}
	if args.Destinations == nil {
		return nil, errors.New("invalid value for required argument 'Destinations'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Payload == nil {
		return nil, errors.New("invalid value for required argument 'Payload'")
	}
	if args.Subject == nil {
		return nil, errors.New("invalid value for required argument 'Subject'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotificationTemplate
	err := ctx.RegisterResource("impart:index/notificationTemplate:NotificationTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationTemplate gets an existing NotificationTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationTemplateState, opts ...pulumi.ResourceOption) (*NotificationTemplate, error) {
	var resource NotificationTemplate
	err := ctx.ReadResource("impart:index/notificationTemplate:NotificationTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationTemplate resources.
type notificationTemplateState struct {
	// The connector id.
	ConnectorId *string `pulumi:"connectorId"`
	// An array of destination ids to which the payloads will be sent.
	Destinations []string `pulumi:"destinations"`
	// The name for this notification template.
	Name *string `pulumi:"name"`
	// The payload message that will be sent to the Third Party API.
	Payload *string `pulumi:"payload"`
	// The subject message that will be sent to the Third Party API.
	Subject *string `pulumi:"subject"`
}

type NotificationTemplateState struct {
	// The connector id.
	ConnectorId pulumi.StringPtrInput
	// An array of destination ids to which the payloads will be sent.
	Destinations pulumi.StringArrayInput
	// The name for this notification template.
	Name pulumi.StringPtrInput
	// The payload message that will be sent to the Third Party API.
	Payload pulumi.StringPtrInput
	// The subject message that will be sent to the Third Party API.
	Subject pulumi.StringPtrInput
}

func (NotificationTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationTemplateState)(nil)).Elem()
}

type notificationTemplateArgs struct {
	// The connector id.
	ConnectorId string `pulumi:"connectorId"`
	// An array of destination ids to which the payloads will be sent.
	Destinations []string `pulumi:"destinations"`
	// The name for this notification template.
	Name string `pulumi:"name"`
	// The payload message that will be sent to the Third Party API.
	Payload string `pulumi:"payload"`
	// The subject message that will be sent to the Third Party API.
	Subject string `pulumi:"subject"`
}

// The set of arguments for constructing a NotificationTemplate resource.
type NotificationTemplateArgs struct {
	// The connector id.
	ConnectorId pulumi.StringInput
	// An array of destination ids to which the payloads will be sent.
	Destinations pulumi.StringArrayInput
	// The name for this notification template.
	Name pulumi.StringInput
	// The payload message that will be sent to the Third Party API.
	Payload pulumi.StringInput
	// The subject message that will be sent to the Third Party API.
	Subject pulumi.StringInput
}

func (NotificationTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationTemplateArgs)(nil)).Elem()
}

type NotificationTemplateInput interface {
	pulumi.Input

	ToNotificationTemplateOutput() NotificationTemplateOutput
	ToNotificationTemplateOutputWithContext(ctx context.Context) NotificationTemplateOutput
}

func (*NotificationTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationTemplate)(nil)).Elem()
}

func (i *NotificationTemplate) ToNotificationTemplateOutput() NotificationTemplateOutput {
	return i.ToNotificationTemplateOutputWithContext(context.Background())
}

func (i *NotificationTemplate) ToNotificationTemplateOutputWithContext(ctx context.Context) NotificationTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationTemplateOutput)
}

// NotificationTemplateArrayInput is an input type that accepts NotificationTemplateArray and NotificationTemplateArrayOutput values.
// You can construct a concrete instance of `NotificationTemplateArrayInput` via:
//
//	NotificationTemplateArray{ NotificationTemplateArgs{...} }
type NotificationTemplateArrayInput interface {
	pulumi.Input

	ToNotificationTemplateArrayOutput() NotificationTemplateArrayOutput
	ToNotificationTemplateArrayOutputWithContext(context.Context) NotificationTemplateArrayOutput
}

type NotificationTemplateArray []NotificationTemplateInput

func (NotificationTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationTemplate)(nil)).Elem()
}

func (i NotificationTemplateArray) ToNotificationTemplateArrayOutput() NotificationTemplateArrayOutput {
	return i.ToNotificationTemplateArrayOutputWithContext(context.Background())
}

func (i NotificationTemplateArray) ToNotificationTemplateArrayOutputWithContext(ctx context.Context) NotificationTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationTemplateArrayOutput)
}

// NotificationTemplateMapInput is an input type that accepts NotificationTemplateMap and NotificationTemplateMapOutput values.
// You can construct a concrete instance of `NotificationTemplateMapInput` via:
//
//	NotificationTemplateMap{ "key": NotificationTemplateArgs{...} }
type NotificationTemplateMapInput interface {
	pulumi.Input

	ToNotificationTemplateMapOutput() NotificationTemplateMapOutput
	ToNotificationTemplateMapOutputWithContext(context.Context) NotificationTemplateMapOutput
}

type NotificationTemplateMap map[string]NotificationTemplateInput

func (NotificationTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationTemplate)(nil)).Elem()
}

func (i NotificationTemplateMap) ToNotificationTemplateMapOutput() NotificationTemplateMapOutput {
	return i.ToNotificationTemplateMapOutputWithContext(context.Background())
}

func (i NotificationTemplateMap) ToNotificationTemplateMapOutputWithContext(ctx context.Context) NotificationTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationTemplateMapOutput)
}

type NotificationTemplateOutput struct{ *pulumi.OutputState }

func (NotificationTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationTemplate)(nil)).Elem()
}

func (o NotificationTemplateOutput) ToNotificationTemplateOutput() NotificationTemplateOutput {
	return o
}

func (o NotificationTemplateOutput) ToNotificationTemplateOutputWithContext(ctx context.Context) NotificationTemplateOutput {
	return o
}

// The connector id.
func (o NotificationTemplateOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationTemplate) pulumi.StringOutput { return v.ConnectorId }).(pulumi.StringOutput)
}

// An array of destination ids to which the payloads will be sent.
func (o NotificationTemplateOutput) Destinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationTemplate) pulumi.StringArrayOutput { return v.Destinations }).(pulumi.StringArrayOutput)
}

// The name for this notification template.
func (o NotificationTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The payload message that will be sent to the Third Party API.
func (o NotificationTemplateOutput) Payload() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationTemplate) pulumi.StringOutput { return v.Payload }).(pulumi.StringOutput)
}

// The subject message that will be sent to the Third Party API.
func (o NotificationTemplateOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationTemplate) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

type NotificationTemplateArrayOutput struct{ *pulumi.OutputState }

func (NotificationTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationTemplate)(nil)).Elem()
}

func (o NotificationTemplateArrayOutput) ToNotificationTemplateArrayOutput() NotificationTemplateArrayOutput {
	return o
}

func (o NotificationTemplateArrayOutput) ToNotificationTemplateArrayOutputWithContext(ctx context.Context) NotificationTemplateArrayOutput {
	return o
}

func (o NotificationTemplateArrayOutput) Index(i pulumi.IntInput) NotificationTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationTemplate {
		return vs[0].([]*NotificationTemplate)[vs[1].(int)]
	}).(NotificationTemplateOutput)
}

type NotificationTemplateMapOutput struct{ *pulumi.OutputState }

func (NotificationTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationTemplate)(nil)).Elem()
}

func (o NotificationTemplateMapOutput) ToNotificationTemplateMapOutput() NotificationTemplateMapOutput {
	return o
}

func (o NotificationTemplateMapOutput) ToNotificationTemplateMapOutputWithContext(ctx context.Context) NotificationTemplateMapOutput {
	return o
}

func (o NotificationTemplateMapOutput) MapIndex(k pulumi.StringInput) NotificationTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationTemplate {
		return vs[0].(map[string]*NotificationTemplate)[vs[1].(string)]
	}).(NotificationTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationTemplateInput)(nil)).Elem(), &NotificationTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationTemplateArrayInput)(nil)).Elem(), NotificationTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationTemplateMapInput)(nil)).Elem(), NotificationTemplateMap{})
	pulumi.RegisterOutputType(NotificationTemplateOutput{})
	pulumi.RegisterOutputType(NotificationTemplateArrayOutput{})
	pulumi.RegisterOutputType(NotificationTemplateMapOutput{})
}
