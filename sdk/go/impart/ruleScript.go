// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package impart

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a rule script.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/impart-security/pulumi-impart/sdk/go/impart"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := impart.NewRuleScript(ctx, "example", &impart.RuleScriptArgs{
//				Description: pulumi.String("Rule description"),
//				Disabled:    pulumi.Bool(false),
//				Name:        pulumi.String("example"),
//				SourceFile:  pulumi.String(fmt.Sprintf("%v/rule.js", path.Module)),
//				SourceHash:  pulumi.String("<sha256 hash for the source_file content>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RuleScript struct {
	pulumi.CustomResourceState

	// The description for this rule script.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Set true to disable the rule script.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// The name for this rule script.
	Name pulumi.StringOutput `pulumi:"name"`
	// The rule source file.
	SourceFile pulumi.StringOutput `pulumi:"sourceFile"`
	// The rule source hash.
	SourceHash pulumi.StringPtrOutput `pulumi:"sourceHash"`
}

// NewRuleScript registers a new resource with the given unique name, arguments, and options.
func NewRuleScript(ctx *pulumi.Context,
	name string, args *RuleScriptArgs, opts ...pulumi.ResourceOption) (*RuleScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Disabled == nil {
		return nil, errors.New("invalid value for required argument 'Disabled'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.SourceFile == nil {
		return nil, errors.New("invalid value for required argument 'SourceFile'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RuleScript
	err := ctx.RegisterResource("impart:index/ruleScript:RuleScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleScript gets an existing RuleScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleScriptState, opts ...pulumi.ResourceOption) (*RuleScript, error) {
	var resource RuleScript
	err := ctx.ReadResource("impart:index/ruleScript:RuleScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleScript resources.
type ruleScriptState struct {
	// The description for this rule script.
	Description *string `pulumi:"description"`
	// Set true to disable the rule script.
	Disabled *bool `pulumi:"disabled"`
	// The name for this rule script.
	Name *string `pulumi:"name"`
	// The rule source file.
	SourceFile *string `pulumi:"sourceFile"`
	// The rule source hash.
	SourceHash *string `pulumi:"sourceHash"`
}

type RuleScriptState struct {
	// The description for this rule script.
	Description pulumi.StringPtrInput
	// Set true to disable the rule script.
	Disabled pulumi.BoolPtrInput
	// The name for this rule script.
	Name pulumi.StringPtrInput
	// The rule source file.
	SourceFile pulumi.StringPtrInput
	// The rule source hash.
	SourceHash pulumi.StringPtrInput
}

func (RuleScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleScriptState)(nil)).Elem()
}

type ruleScriptArgs struct {
	// The description for this rule script.
	Description *string `pulumi:"description"`
	// Set true to disable the rule script.
	Disabled bool `pulumi:"disabled"`
	// The name for this rule script.
	Name string `pulumi:"name"`
	// The rule source file.
	SourceFile string `pulumi:"sourceFile"`
	// The rule source hash.
	SourceHash *string `pulumi:"sourceHash"`
}

// The set of arguments for constructing a RuleScript resource.
type RuleScriptArgs struct {
	// The description for this rule script.
	Description pulumi.StringPtrInput
	// Set true to disable the rule script.
	Disabled pulumi.BoolInput
	// The name for this rule script.
	Name pulumi.StringInput
	// The rule source file.
	SourceFile pulumi.StringInput
	// The rule source hash.
	SourceHash pulumi.StringPtrInput
}

func (RuleScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleScriptArgs)(nil)).Elem()
}

type RuleScriptInput interface {
	pulumi.Input

	ToRuleScriptOutput() RuleScriptOutput
	ToRuleScriptOutputWithContext(ctx context.Context) RuleScriptOutput
}

func (*RuleScript) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleScript)(nil)).Elem()
}

func (i *RuleScript) ToRuleScriptOutput() RuleScriptOutput {
	return i.ToRuleScriptOutputWithContext(context.Background())
}

func (i *RuleScript) ToRuleScriptOutputWithContext(ctx context.Context) RuleScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleScriptOutput)
}

// RuleScriptArrayInput is an input type that accepts RuleScriptArray and RuleScriptArrayOutput values.
// You can construct a concrete instance of `RuleScriptArrayInput` via:
//
//	RuleScriptArray{ RuleScriptArgs{...} }
type RuleScriptArrayInput interface {
	pulumi.Input

	ToRuleScriptArrayOutput() RuleScriptArrayOutput
	ToRuleScriptArrayOutputWithContext(context.Context) RuleScriptArrayOutput
}

type RuleScriptArray []RuleScriptInput

func (RuleScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleScript)(nil)).Elem()
}

func (i RuleScriptArray) ToRuleScriptArrayOutput() RuleScriptArrayOutput {
	return i.ToRuleScriptArrayOutputWithContext(context.Background())
}

func (i RuleScriptArray) ToRuleScriptArrayOutputWithContext(ctx context.Context) RuleScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleScriptArrayOutput)
}

// RuleScriptMapInput is an input type that accepts RuleScriptMap and RuleScriptMapOutput values.
// You can construct a concrete instance of `RuleScriptMapInput` via:
//
//	RuleScriptMap{ "key": RuleScriptArgs{...} }
type RuleScriptMapInput interface {
	pulumi.Input

	ToRuleScriptMapOutput() RuleScriptMapOutput
	ToRuleScriptMapOutputWithContext(context.Context) RuleScriptMapOutput
}

type RuleScriptMap map[string]RuleScriptInput

func (RuleScriptMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleScript)(nil)).Elem()
}

func (i RuleScriptMap) ToRuleScriptMapOutput() RuleScriptMapOutput {
	return i.ToRuleScriptMapOutputWithContext(context.Background())
}

func (i RuleScriptMap) ToRuleScriptMapOutputWithContext(ctx context.Context) RuleScriptMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleScriptMapOutput)
}

type RuleScriptOutput struct{ *pulumi.OutputState }

func (RuleScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleScript)(nil)).Elem()
}

func (o RuleScriptOutput) ToRuleScriptOutput() RuleScriptOutput {
	return o
}

func (o RuleScriptOutput) ToRuleScriptOutputWithContext(ctx context.Context) RuleScriptOutput {
	return o
}

// The description for this rule script.
func (o RuleScriptOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleScript) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Set true to disable the rule script.
func (o RuleScriptOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RuleScript) pulumi.BoolOutput { return v.Disabled }).(pulumi.BoolOutput)
}

// The name for this rule script.
func (o RuleScriptOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleScript) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The rule source file.
func (o RuleScriptOutput) SourceFile() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleScript) pulumi.StringOutput { return v.SourceFile }).(pulumi.StringOutput)
}

// The rule source hash.
func (o RuleScriptOutput) SourceHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleScript) pulumi.StringPtrOutput { return v.SourceHash }).(pulumi.StringPtrOutput)
}

type RuleScriptArrayOutput struct{ *pulumi.OutputState }

func (RuleScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleScript)(nil)).Elem()
}

func (o RuleScriptArrayOutput) ToRuleScriptArrayOutput() RuleScriptArrayOutput {
	return o
}

func (o RuleScriptArrayOutput) ToRuleScriptArrayOutputWithContext(ctx context.Context) RuleScriptArrayOutput {
	return o
}

func (o RuleScriptArrayOutput) Index(i pulumi.IntInput) RuleScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuleScript {
		return vs[0].([]*RuleScript)[vs[1].(int)]
	}).(RuleScriptOutput)
}

type RuleScriptMapOutput struct{ *pulumi.OutputState }

func (RuleScriptMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleScript)(nil)).Elem()
}

func (o RuleScriptMapOutput) ToRuleScriptMapOutput() RuleScriptMapOutput {
	return o
}

func (o RuleScriptMapOutput) ToRuleScriptMapOutputWithContext(ctx context.Context) RuleScriptMapOutput {
	return o
}

func (o RuleScriptMapOutput) MapIndex(k pulumi.StringInput) RuleScriptOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuleScript {
		return vs[0].(map[string]*RuleScript)[vs[1].(string)]
	}).(RuleScriptOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleScriptInput)(nil)).Elem(), &RuleScript{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleScriptArrayInput)(nil)).Elem(), RuleScriptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleScriptMapInput)(nil)).Elem(), RuleScriptMap{})
	pulumi.RegisterOutputType(RuleScriptOutput{})
	pulumi.RegisterOutputType(RuleScriptArrayOutput{})
	pulumi.RegisterOutputType(RuleScriptMapOutput{})
}
