// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package impart

import (
	"context"
	"reflect"

	"errors"
	"github.com/impart-security/pulumi-impart/sdk/go/impart/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//	"os"
//
//	"github.com/impart-security/pulumi-impart/sdk/go/impart"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a new rule script
//			_, err := impart.NewRule(ctx, "example", &impart.RuleArgs{
//				Name:           pulumi.String("example"),
//				Disabled:       pulumi.Bool(false),
//				Description:    pulumi.String("Rule description"),
//				SourceFile:     pulumi.Sprintf("%v/rule.js", path.Module),
//				SourceHash:     pulumi.String("<sha256 hash for the source_file content>"),
//				BlockingEffect: pulumi.String("block"),
//				Type:           pulumi.String("script"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a new rule recipe with content
//			_, err = impart.NewRule(ctx, "exampleRuleRecipe", &impart.RuleArgs{
//				Name:           pulumi.String("example"),
//				Disabled:       pulumi.Bool(false),
//				Description:    pulumi.String("Rule description"),
//				Content:        pulumi.String(readFileOrPanic(fmt.Sprintf("%v/rule.json", path.Module))),
//				BlockingEffect: pulumi.String("block"),
//				Type:           pulumi.String("recipe"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Rule struct {
	pulumi.CustomResourceState

	// The rule blocking effect. Allowed values: block, simulate. If not set effect will be block.
	BlockingEffect pulumi.StringPtrOutput `pulumi:"blockingEffect"`
	// The rule body content.
	Content pulumi.StringPtrOutput `pulumi:"content"`
	// The description for this rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Set true to disable the rule.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// The applied labels.
	Labels pulumi.StringArrayOutput `pulumi:"labels"`
	// The name for this rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// The rule source file.
	SourceFile pulumi.StringPtrOutput `pulumi:"sourceFile"`
	// The rule source hash.
	SourceHash pulumi.StringPtrOutput `pulumi:"sourceHash"`
	// The type of the rule. Allowed values: script, recipe.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOption) (*Rule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Disabled == nil {
		return nil, errors.New("invalid value for required argument 'Disabled'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rule
	err := ctx.RegisterResource("impart:index/rule:Rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleState, opts ...pulumi.ResourceOption) (*Rule, error) {
	var resource Rule
	err := ctx.ReadResource("impart:index/rule:Rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rule resources.
type ruleState struct {
	// The rule blocking effect. Allowed values: block, simulate. If not set effect will be block.
	BlockingEffect *string `pulumi:"blockingEffect"`
	// The rule body content.
	Content *string `pulumi:"content"`
	// The description for this rule.
	Description *string `pulumi:"description"`
	// Set true to disable the rule.
	Disabled *bool `pulumi:"disabled"`
	// The applied labels.
	Labels []string `pulumi:"labels"`
	// The name for this rule.
	Name *string `pulumi:"name"`
	// The rule source file.
	SourceFile *string `pulumi:"sourceFile"`
	// The rule source hash.
	SourceHash *string `pulumi:"sourceHash"`
	// The type of the rule. Allowed values: script, recipe.
	Type *string `pulumi:"type"`
}

type RuleState struct {
	// The rule blocking effect. Allowed values: block, simulate. If not set effect will be block.
	BlockingEffect pulumi.StringPtrInput
	// The rule body content.
	Content pulumi.StringPtrInput
	// The description for this rule.
	Description pulumi.StringPtrInput
	// Set true to disable the rule.
	Disabled pulumi.BoolPtrInput
	// The applied labels.
	Labels pulumi.StringArrayInput
	// The name for this rule.
	Name pulumi.StringPtrInput
	// The rule source file.
	SourceFile pulumi.StringPtrInput
	// The rule source hash.
	SourceHash pulumi.StringPtrInput
	// The type of the rule. Allowed values: script, recipe.
	Type pulumi.StringPtrInput
}

func (RuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleState)(nil)).Elem()
}

type ruleArgs struct {
	// The rule blocking effect. Allowed values: block, simulate. If not set effect will be block.
	BlockingEffect *string `pulumi:"blockingEffect"`
	// The rule body content.
	Content *string `pulumi:"content"`
	// The description for this rule.
	Description *string `pulumi:"description"`
	// Set true to disable the rule.
	Disabled bool `pulumi:"disabled"`
	// The applied labels.
	Labels []string `pulumi:"labels"`
	// The name for this rule.
	Name string `pulumi:"name"`
	// The rule source file.
	SourceFile *string `pulumi:"sourceFile"`
	// The rule source hash.
	SourceHash *string `pulumi:"sourceHash"`
	// The type of the rule. Allowed values: script, recipe.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	// The rule blocking effect. Allowed values: block, simulate. If not set effect will be block.
	BlockingEffect pulumi.StringPtrInput
	// The rule body content.
	Content pulumi.StringPtrInput
	// The description for this rule.
	Description pulumi.StringPtrInput
	// Set true to disable the rule.
	Disabled pulumi.BoolInput
	// The applied labels.
	Labels pulumi.StringArrayInput
	// The name for this rule.
	Name pulumi.StringInput
	// The rule source file.
	SourceFile pulumi.StringPtrInput
	// The rule source hash.
	SourceHash pulumi.StringPtrInput
	// The type of the rule. Allowed values: script, recipe.
	Type pulumi.StringInput
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleArgs)(nil)).Elem()
}

type RuleInput interface {
	pulumi.Input

	ToRuleOutput() RuleOutput
	ToRuleOutputWithContext(ctx context.Context) RuleOutput
}

func (*Rule) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (i *Rule) ToRuleOutput() RuleOutput {
	return i.ToRuleOutputWithContext(context.Background())
}

func (i *Rule) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOutput)
}

// RuleArrayInput is an input type that accepts RuleArray and RuleArrayOutput values.
// You can construct a concrete instance of `RuleArrayInput` via:
//
//	RuleArray{ RuleArgs{...} }
type RuleArrayInput interface {
	pulumi.Input

	ToRuleArrayOutput() RuleArrayOutput
	ToRuleArrayOutputWithContext(context.Context) RuleArrayOutput
}

type RuleArray []RuleInput

func (RuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rule)(nil)).Elem()
}

func (i RuleArray) ToRuleArrayOutput() RuleArrayOutput {
	return i.ToRuleArrayOutputWithContext(context.Background())
}

func (i RuleArray) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleArrayOutput)
}

// RuleMapInput is an input type that accepts RuleMap and RuleMapOutput values.
// You can construct a concrete instance of `RuleMapInput` via:
//
//	RuleMap{ "key": RuleArgs{...} }
type RuleMapInput interface {
	pulumi.Input

	ToRuleMapOutput() RuleMapOutput
	ToRuleMapOutputWithContext(context.Context) RuleMapOutput
}

type RuleMap map[string]RuleInput

func (RuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rule)(nil)).Elem()
}

func (i RuleMap) ToRuleMapOutput() RuleMapOutput {
	return i.ToRuleMapOutputWithContext(context.Background())
}

func (i RuleMap) ToRuleMapOutputWithContext(ctx context.Context) RuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMapOutput)
}

type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

// The rule blocking effect. Allowed values: block, simulate. If not set effect will be block.
func (o RuleOutput) BlockingEffect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.BlockingEffect }).(pulumi.StringPtrOutput)
}

// The rule body content.
func (o RuleOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.Content }).(pulumi.StringPtrOutput)
}

// The description for this rule.
func (o RuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Set true to disable the rule.
func (o RuleOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Rule) pulumi.BoolOutput { return v.Disabled }).(pulumi.BoolOutput)
}

// The applied labels.
func (o RuleOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

// The name for this rule.
func (o RuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The rule source file.
func (o RuleOutput) SourceFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.SourceFile }).(pulumi.StringPtrOutput)
}

// The rule source hash.
func (o RuleOutput) SourceHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.SourceHash }).(pulumi.StringPtrOutput)
}

// The type of the rule. Allowed values: script, recipe.
func (o RuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type RuleArrayOutput struct{ *pulumi.OutputState }

func (RuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rule)(nil)).Elem()
}

func (o RuleArrayOutput) ToRuleArrayOutput() RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) Index(i pulumi.IntInput) RuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Rule {
		return vs[0].([]*Rule)[vs[1].(int)]
	}).(RuleOutput)
}

type RuleMapOutput struct{ *pulumi.OutputState }

func (RuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rule)(nil)).Elem()
}

func (o RuleMapOutput) ToRuleMapOutput() RuleMapOutput {
	return o
}

func (o RuleMapOutput) ToRuleMapOutputWithContext(ctx context.Context) RuleMapOutput {
	return o
}

func (o RuleMapOutput) MapIndex(k pulumi.StringInput) RuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Rule {
		return vs[0].(map[string]*Rule)[vs[1].(string)]
	}).(RuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleInput)(nil)).Elem(), &Rule{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleArrayInput)(nil)).Elem(), RuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleMapInput)(nil)).Elem(), RuleMap{})
	pulumi.RegisterOutputType(RuleOutput{})
	pulumi.RegisterOutputType(RuleArrayOutput{})
	pulumi.RegisterOutputType(RuleMapOutput{})
}
