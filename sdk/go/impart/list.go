// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package impart

import (
	"context"
	"reflect"

	"errors"
	"github.com/impart-security/pulumi-impart/sdk/go/impart/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a list.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/impart-security/pulumi-impart/sdk/go/impart"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a new list
//			_, err := impart.NewList(ctx, "example", &impart.ListArgs{
//				Description: pulumi.String("list description"),
//				Items: impart.ListItemArray{
//					&impart.ListItemArgs{
//						Value: pulumi.String("item1"),
//					},
//					&impart.ListItemArgs{
//						Value: pulumi.String("item2"),
//					},
//				},
//				Kind: pulumi.String("string"),
//				Name: pulumi.String("list_example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type List struct {
	pulumi.CustomResourceState

	// The description for this list.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The list functionality. Allowed values are add, add/remove.
	Functionality pulumi.StringPtrOutput `pulumi:"functionality"`
	// The list items.
	Items ListItemArrayOutput `pulumi:"items"`
	// The list kind.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The applied labels.
	Labels pulumi.StringArrayOutput `pulumi:"labels"`
	// The name for this list.
	Name pulumi.StringOutput `pulumi:"name"`
	// The list subkind.
	Subkind pulumi.StringPtrOutput `pulumi:"subkind"`
}

// NewList registers a new resource with the given unique name, arguments, and options.
func NewList(ctx *pulumi.Context,
	name string, args *ListArgs, opts ...pulumi.ResourceOption) (*List, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource List
	err := ctx.RegisterResource("impart:index/list:List", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetList gets an existing List resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListState, opts ...pulumi.ResourceOption) (*List, error) {
	var resource List
	err := ctx.ReadResource("impart:index/list:List", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering List resources.
type listState struct {
	// The description for this list.
	Description *string `pulumi:"description"`
	// The list functionality. Allowed values are add, add/remove.
	Functionality *string `pulumi:"functionality"`
	// The list items.
	Items []ListItem `pulumi:"items"`
	// The list kind.
	Kind *string `pulumi:"kind"`
	// The applied labels.
	Labels []string `pulumi:"labels"`
	// The name for this list.
	Name *string `pulumi:"name"`
	// The list subkind.
	Subkind *string `pulumi:"subkind"`
}

type ListState struct {
	// The description for this list.
	Description pulumi.StringPtrInput
	// The list functionality. Allowed values are add, add/remove.
	Functionality pulumi.StringPtrInput
	// The list items.
	Items ListItemArrayInput
	// The list kind.
	Kind pulumi.StringPtrInput
	// The applied labels.
	Labels pulumi.StringArrayInput
	// The name for this list.
	Name pulumi.StringPtrInput
	// The list subkind.
	Subkind pulumi.StringPtrInput
}

func (ListState) ElementType() reflect.Type {
	return reflect.TypeOf((*listState)(nil)).Elem()
}

type listArgs struct {
	// The description for this list.
	Description *string `pulumi:"description"`
	// The list functionality. Allowed values are add, add/remove.
	Functionality *string `pulumi:"functionality"`
	// The list items.
	Items []ListItem `pulumi:"items"`
	// The list kind.
	Kind string `pulumi:"kind"`
	// The applied labels.
	Labels []string `pulumi:"labels"`
	// The name for this list.
	Name string `pulumi:"name"`
	// The list subkind.
	Subkind *string `pulumi:"subkind"`
}

// The set of arguments for constructing a List resource.
type ListArgs struct {
	// The description for this list.
	Description pulumi.StringPtrInput
	// The list functionality. Allowed values are add, add/remove.
	Functionality pulumi.StringPtrInput
	// The list items.
	Items ListItemArrayInput
	// The list kind.
	Kind pulumi.StringInput
	// The applied labels.
	Labels pulumi.StringArrayInput
	// The name for this list.
	Name pulumi.StringInput
	// The list subkind.
	Subkind pulumi.StringPtrInput
}

func (ListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listArgs)(nil)).Elem()
}

type ListInput interface {
	pulumi.Input

	ToListOutput() ListOutput
	ToListOutputWithContext(ctx context.Context) ListOutput
}

func (*List) ElementType() reflect.Type {
	return reflect.TypeOf((**List)(nil)).Elem()
}

func (i *List) ToListOutput() ListOutput {
	return i.ToListOutputWithContext(context.Background())
}

func (i *List) ToListOutputWithContext(ctx context.Context) ListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListOutput)
}

// ListArrayInput is an input type that accepts ListArray and ListArrayOutput values.
// You can construct a concrete instance of `ListArrayInput` via:
//
//	ListArray{ ListArgs{...} }
type ListArrayInput interface {
	pulumi.Input

	ToListArrayOutput() ListArrayOutput
	ToListArrayOutputWithContext(context.Context) ListArrayOutput
}

type ListArray []ListInput

func (ListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*List)(nil)).Elem()
}

func (i ListArray) ToListArrayOutput() ListArrayOutput {
	return i.ToListArrayOutputWithContext(context.Background())
}

func (i ListArray) ToListArrayOutputWithContext(ctx context.Context) ListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListArrayOutput)
}

// ListMapInput is an input type that accepts ListMap and ListMapOutput values.
// You can construct a concrete instance of `ListMapInput` via:
//
//	ListMap{ "key": ListArgs{...} }
type ListMapInput interface {
	pulumi.Input

	ToListMapOutput() ListMapOutput
	ToListMapOutputWithContext(context.Context) ListMapOutput
}

type ListMap map[string]ListInput

func (ListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*List)(nil)).Elem()
}

func (i ListMap) ToListMapOutput() ListMapOutput {
	return i.ToListMapOutputWithContext(context.Background())
}

func (i ListMap) ToListMapOutputWithContext(ctx context.Context) ListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListMapOutput)
}

type ListOutput struct{ *pulumi.OutputState }

func (ListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**List)(nil)).Elem()
}

func (o ListOutput) ToListOutput() ListOutput {
	return o
}

func (o ListOutput) ToListOutputWithContext(ctx context.Context) ListOutput {
	return o
}

// The description for this list.
func (o ListOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *List) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The list functionality. Allowed values are add, add/remove.
func (o ListOutput) Functionality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *List) pulumi.StringPtrOutput { return v.Functionality }).(pulumi.StringPtrOutput)
}

// The list items.
func (o ListOutput) Items() ListItemArrayOutput {
	return o.ApplyT(func(v *List) ListItemArrayOutput { return v.Items }).(ListItemArrayOutput)
}

// The list kind.
func (o ListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *List) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The applied labels.
func (o ListOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *List) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

// The name for this list.
func (o ListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *List) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The list subkind.
func (o ListOutput) Subkind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *List) pulumi.StringPtrOutput { return v.Subkind }).(pulumi.StringPtrOutput)
}

type ListArrayOutput struct{ *pulumi.OutputState }

func (ListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*List)(nil)).Elem()
}

func (o ListArrayOutput) ToListArrayOutput() ListArrayOutput {
	return o
}

func (o ListArrayOutput) ToListArrayOutputWithContext(ctx context.Context) ListArrayOutput {
	return o
}

func (o ListArrayOutput) Index(i pulumi.IntInput) ListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *List {
		return vs[0].([]*List)[vs[1].(int)]
	}).(ListOutput)
}

type ListMapOutput struct{ *pulumi.OutputState }

func (ListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*List)(nil)).Elem()
}

func (o ListMapOutput) ToListMapOutput() ListMapOutput {
	return o
}

func (o ListMapOutput) ToListMapOutputWithContext(ctx context.Context) ListMapOutput {
	return o
}

func (o ListMapOutput) MapIndex(k pulumi.StringInput) ListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *List {
		return vs[0].(map[string]*List)[vs[1].(string)]
	}).(ListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListInput)(nil)).Elem(), &List{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListArrayInput)(nil)).Elem(), ListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListMapInput)(nil)).Elem(), ListMap{})
	pulumi.RegisterOutputType(ListOutput{})
	pulumi.RegisterOutputType(ListArrayOutput{})
	pulumi.RegisterOutputType(ListMapOutput{})
}
