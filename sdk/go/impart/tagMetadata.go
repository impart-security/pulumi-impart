// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package impart

import (
	"context"
	"reflect"

	"errors"
	"github.com/impart-security/pulumi-impart/sdk/go/impart/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/impart-security/pulumi-impart/sdk/go/impart"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a new tag metadata
//			_, err := impart.NewTagMetadata(ctx, "example", &impart.TagMetadataArgs{
//				Name:        pulumi.String("tag"),
//				Description: pulumi.String("tag description"),
//				ExternalUrl: pulumi.String("http://example.com"),
//				Labels: pulumi.StringArray{
//					resource.Impart_label.Example.Slug,
//				},
//				RiskStatement: pulumi.String("risk statement"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type TagMetadata struct {
	pulumi.CustomResourceState

	// The description for the tag.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The external URL for the tag.
	ExternalUrl pulumi.StringPtrOutput `pulumi:"externalUrl"`
	// The applied labels.
	Labels pulumi.StringArrayOutput `pulumi:"labels"`
	// The tag name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The risk statement for the tag.
	RiskStatement pulumi.StringPtrOutput `pulumi:"riskStatement"`
}

// NewTagMetadata registers a new resource with the given unique name, arguments, and options.
func NewTagMetadata(ctx *pulumi.Context,
	name string, args *TagMetadataArgs, opts ...pulumi.ResourceOption) (*TagMetadata, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TagMetadata
	err := ctx.RegisterResource("impart:index/tagMetadata:TagMetadata", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagMetadata gets an existing TagMetadata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagMetadata(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagMetadataState, opts ...pulumi.ResourceOption) (*TagMetadata, error) {
	var resource TagMetadata
	err := ctx.ReadResource("impart:index/tagMetadata:TagMetadata", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagMetadata resources.
type tagMetadataState struct {
	// The description for the tag.
	Description *string `pulumi:"description"`
	// The external URL for the tag.
	ExternalUrl *string `pulumi:"externalUrl"`
	// The applied labels.
	Labels []string `pulumi:"labels"`
	// The tag name.
	Name *string `pulumi:"name"`
	// The risk statement for the tag.
	RiskStatement *string `pulumi:"riskStatement"`
}

type TagMetadataState struct {
	// The description for the tag.
	Description pulumi.StringPtrInput
	// The external URL for the tag.
	ExternalUrl pulumi.StringPtrInput
	// The applied labels.
	Labels pulumi.StringArrayInput
	// The tag name.
	Name pulumi.StringPtrInput
	// The risk statement for the tag.
	RiskStatement pulumi.StringPtrInput
}

func (TagMetadataState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagMetadataState)(nil)).Elem()
}

type tagMetadataArgs struct {
	// The description for the tag.
	Description *string `pulumi:"description"`
	// The external URL for the tag.
	ExternalUrl *string `pulumi:"externalUrl"`
	// The applied labels.
	Labels []string `pulumi:"labels"`
	// The tag name.
	Name string `pulumi:"name"`
	// The risk statement for the tag.
	RiskStatement *string `pulumi:"riskStatement"`
}

// The set of arguments for constructing a TagMetadata resource.
type TagMetadataArgs struct {
	// The description for the tag.
	Description pulumi.StringPtrInput
	// The external URL for the tag.
	ExternalUrl pulumi.StringPtrInput
	// The applied labels.
	Labels pulumi.StringArrayInput
	// The tag name.
	Name pulumi.StringInput
	// The risk statement for the tag.
	RiskStatement pulumi.StringPtrInput
}

func (TagMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagMetadataArgs)(nil)).Elem()
}

type TagMetadataInput interface {
	pulumi.Input

	ToTagMetadataOutput() TagMetadataOutput
	ToTagMetadataOutputWithContext(ctx context.Context) TagMetadataOutput
}

func (*TagMetadata) ElementType() reflect.Type {
	return reflect.TypeOf((**TagMetadata)(nil)).Elem()
}

func (i *TagMetadata) ToTagMetadataOutput() TagMetadataOutput {
	return i.ToTagMetadataOutputWithContext(context.Background())
}

func (i *TagMetadata) ToTagMetadataOutputWithContext(ctx context.Context) TagMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagMetadataOutput)
}

// TagMetadataArrayInput is an input type that accepts TagMetadataArray and TagMetadataArrayOutput values.
// You can construct a concrete instance of `TagMetadataArrayInput` via:
//
//	TagMetadataArray{ TagMetadataArgs{...} }
type TagMetadataArrayInput interface {
	pulumi.Input

	ToTagMetadataArrayOutput() TagMetadataArrayOutput
	ToTagMetadataArrayOutputWithContext(context.Context) TagMetadataArrayOutput
}

type TagMetadataArray []TagMetadataInput

func (TagMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagMetadata)(nil)).Elem()
}

func (i TagMetadataArray) ToTagMetadataArrayOutput() TagMetadataArrayOutput {
	return i.ToTagMetadataArrayOutputWithContext(context.Background())
}

func (i TagMetadataArray) ToTagMetadataArrayOutputWithContext(ctx context.Context) TagMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagMetadataArrayOutput)
}

// TagMetadataMapInput is an input type that accepts TagMetadataMap and TagMetadataMapOutput values.
// You can construct a concrete instance of `TagMetadataMapInput` via:
//
//	TagMetadataMap{ "key": TagMetadataArgs{...} }
type TagMetadataMapInput interface {
	pulumi.Input

	ToTagMetadataMapOutput() TagMetadataMapOutput
	ToTagMetadataMapOutputWithContext(context.Context) TagMetadataMapOutput
}

type TagMetadataMap map[string]TagMetadataInput

func (TagMetadataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagMetadata)(nil)).Elem()
}

func (i TagMetadataMap) ToTagMetadataMapOutput() TagMetadataMapOutput {
	return i.ToTagMetadataMapOutputWithContext(context.Background())
}

func (i TagMetadataMap) ToTagMetadataMapOutputWithContext(ctx context.Context) TagMetadataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagMetadataMapOutput)
}

type TagMetadataOutput struct{ *pulumi.OutputState }

func (TagMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagMetadata)(nil)).Elem()
}

func (o TagMetadataOutput) ToTagMetadataOutput() TagMetadataOutput {
	return o
}

func (o TagMetadataOutput) ToTagMetadataOutputWithContext(ctx context.Context) TagMetadataOutput {
	return o
}

// The description for the tag.
func (o TagMetadataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TagMetadata) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The external URL for the tag.
func (o TagMetadataOutput) ExternalUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TagMetadata) pulumi.StringPtrOutput { return v.ExternalUrl }).(pulumi.StringPtrOutput)
}

// The applied labels.
func (o TagMetadataOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TagMetadata) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

// The tag name.
func (o TagMetadataOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TagMetadata) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The risk statement for the tag.
func (o TagMetadataOutput) RiskStatement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TagMetadata) pulumi.StringPtrOutput { return v.RiskStatement }).(pulumi.StringPtrOutput)
}

type TagMetadataArrayOutput struct{ *pulumi.OutputState }

func (TagMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagMetadata)(nil)).Elem()
}

func (o TagMetadataArrayOutput) ToTagMetadataArrayOutput() TagMetadataArrayOutput {
	return o
}

func (o TagMetadataArrayOutput) ToTagMetadataArrayOutputWithContext(ctx context.Context) TagMetadataArrayOutput {
	return o
}

func (o TagMetadataArrayOutput) Index(i pulumi.IntInput) TagMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TagMetadata {
		return vs[0].([]*TagMetadata)[vs[1].(int)]
	}).(TagMetadataOutput)
}

type TagMetadataMapOutput struct{ *pulumi.OutputState }

func (TagMetadataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagMetadata)(nil)).Elem()
}

func (o TagMetadataMapOutput) ToTagMetadataMapOutput() TagMetadataMapOutput {
	return o
}

func (o TagMetadataMapOutput) ToTagMetadataMapOutputWithContext(ctx context.Context) TagMetadataMapOutput {
	return o
}

func (o TagMetadataMapOutput) MapIndex(k pulumi.StringInput) TagMetadataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TagMetadata {
		return vs[0].(map[string]*TagMetadata)[vs[1].(string)]
	}).(TagMetadataOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagMetadataInput)(nil)).Elem(), &TagMetadata{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagMetadataArrayInput)(nil)).Elem(), TagMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagMetadataMapInput)(nil)).Elem(), TagMetadataMap{})
	pulumi.RegisterOutputType(TagMetadataOutput{})
	pulumi.RegisterOutputType(TagMetadataArrayOutput{})
	pulumi.RegisterOutputType(TagMetadataMapOutput{})
}
