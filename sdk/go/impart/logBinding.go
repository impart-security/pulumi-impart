// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package impart

import (
	"context"
	"reflect"

	"errors"
	"github.com/impart-security/pulumi-impart/sdk/go/impart/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a log binding.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/impart-security/pulumi-impart/sdk/go/impart"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a new log binding
//			_, err := impart.NewLogBinding(ctx, "example", &impart.LogBindingArgs{
//				Name:        pulumi.String("log_binding_example"),
//				PatternType: pulumi.String("grok"),
//				Pattern:     pulumi.String("<pattern>\n"),
//				LogstreamId: pulumi.String("logstream_id"),
//				SpecId:      pulumi.Any(resource.Impart_spec.Example.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LogBinding struct {
	pulumi.CustomResourceState

	// The logstream id for this log binding.
	LogstreamId pulumi.StringPtrOutput `pulumi:"logstreamId"`
	// The name for this log binding.
	Name pulumi.StringOutput `pulumi:"name"`
	// The grok/json pattern for this log binding.
	Pattern pulumi.StringOutput `pulumi:"pattern"`
	// The pattern type for this log binding. Accepted values: grok, json
	PatternType pulumi.StringOutput `pulumi:"patternType"`
	// The specification id.
	SpecId pulumi.StringOutput `pulumi:"specId"`
}

// NewLogBinding registers a new resource with the given unique name, arguments, and options.
func NewLogBinding(ctx *pulumi.Context,
	name string, args *LogBindingArgs, opts ...pulumi.ResourceOption) (*LogBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Pattern == nil {
		return nil, errors.New("invalid value for required argument 'Pattern'")
	}
	if args.PatternType == nil {
		return nil, errors.New("invalid value for required argument 'PatternType'")
	}
	if args.SpecId == nil {
		return nil, errors.New("invalid value for required argument 'SpecId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogBinding
	err := ctx.RegisterResource("impart:index/logBinding:LogBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogBinding gets an existing LogBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogBindingState, opts ...pulumi.ResourceOption) (*LogBinding, error) {
	var resource LogBinding
	err := ctx.ReadResource("impart:index/logBinding:LogBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogBinding resources.
type logBindingState struct {
	// The logstream id for this log binding.
	LogstreamId *string `pulumi:"logstreamId"`
	// The name for this log binding.
	Name *string `pulumi:"name"`
	// The grok/json pattern for this log binding.
	Pattern *string `pulumi:"pattern"`
	// The pattern type for this log binding. Accepted values: grok, json
	PatternType *string `pulumi:"patternType"`
	// The specification id.
	SpecId *string `pulumi:"specId"`
}

type LogBindingState struct {
	// The logstream id for this log binding.
	LogstreamId pulumi.StringPtrInput
	// The name for this log binding.
	Name pulumi.StringPtrInput
	// The grok/json pattern for this log binding.
	Pattern pulumi.StringPtrInput
	// The pattern type for this log binding. Accepted values: grok, json
	PatternType pulumi.StringPtrInput
	// The specification id.
	SpecId pulumi.StringPtrInput
}

func (LogBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*logBindingState)(nil)).Elem()
}

type logBindingArgs struct {
	// The logstream id for this log binding.
	LogstreamId *string `pulumi:"logstreamId"`
	// The name for this log binding.
	Name string `pulumi:"name"`
	// The grok/json pattern for this log binding.
	Pattern string `pulumi:"pattern"`
	// The pattern type for this log binding. Accepted values: grok, json
	PatternType string `pulumi:"patternType"`
	// The specification id.
	SpecId string `pulumi:"specId"`
}

// The set of arguments for constructing a LogBinding resource.
type LogBindingArgs struct {
	// The logstream id for this log binding.
	LogstreamId pulumi.StringPtrInput
	// The name for this log binding.
	Name pulumi.StringInput
	// The grok/json pattern for this log binding.
	Pattern pulumi.StringInput
	// The pattern type for this log binding. Accepted values: grok, json
	PatternType pulumi.StringInput
	// The specification id.
	SpecId pulumi.StringInput
}

func (LogBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logBindingArgs)(nil)).Elem()
}

type LogBindingInput interface {
	pulumi.Input

	ToLogBindingOutput() LogBindingOutput
	ToLogBindingOutputWithContext(ctx context.Context) LogBindingOutput
}

func (*LogBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**LogBinding)(nil)).Elem()
}

func (i *LogBinding) ToLogBindingOutput() LogBindingOutput {
	return i.ToLogBindingOutputWithContext(context.Background())
}

func (i *LogBinding) ToLogBindingOutputWithContext(ctx context.Context) LogBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogBindingOutput)
}

// LogBindingArrayInput is an input type that accepts LogBindingArray and LogBindingArrayOutput values.
// You can construct a concrete instance of `LogBindingArrayInput` via:
//
//	LogBindingArray{ LogBindingArgs{...} }
type LogBindingArrayInput interface {
	pulumi.Input

	ToLogBindingArrayOutput() LogBindingArrayOutput
	ToLogBindingArrayOutputWithContext(context.Context) LogBindingArrayOutput
}

type LogBindingArray []LogBindingInput

func (LogBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogBinding)(nil)).Elem()
}

func (i LogBindingArray) ToLogBindingArrayOutput() LogBindingArrayOutput {
	return i.ToLogBindingArrayOutputWithContext(context.Background())
}

func (i LogBindingArray) ToLogBindingArrayOutputWithContext(ctx context.Context) LogBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogBindingArrayOutput)
}

// LogBindingMapInput is an input type that accepts LogBindingMap and LogBindingMapOutput values.
// You can construct a concrete instance of `LogBindingMapInput` via:
//
//	LogBindingMap{ "key": LogBindingArgs{...} }
type LogBindingMapInput interface {
	pulumi.Input

	ToLogBindingMapOutput() LogBindingMapOutput
	ToLogBindingMapOutputWithContext(context.Context) LogBindingMapOutput
}

type LogBindingMap map[string]LogBindingInput

func (LogBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogBinding)(nil)).Elem()
}

func (i LogBindingMap) ToLogBindingMapOutput() LogBindingMapOutput {
	return i.ToLogBindingMapOutputWithContext(context.Background())
}

func (i LogBindingMap) ToLogBindingMapOutputWithContext(ctx context.Context) LogBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogBindingMapOutput)
}

type LogBindingOutput struct{ *pulumi.OutputState }

func (LogBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogBinding)(nil)).Elem()
}

func (o LogBindingOutput) ToLogBindingOutput() LogBindingOutput {
	return o
}

func (o LogBindingOutput) ToLogBindingOutputWithContext(ctx context.Context) LogBindingOutput {
	return o
}

// The logstream id for this log binding.
func (o LogBindingOutput) LogstreamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogBinding) pulumi.StringPtrOutput { return v.LogstreamId }).(pulumi.StringPtrOutput)
}

// The name for this log binding.
func (o LogBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The grok/json pattern for this log binding.
func (o LogBindingOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v *LogBinding) pulumi.StringOutput { return v.Pattern }).(pulumi.StringOutput)
}

// The pattern type for this log binding. Accepted values: grok, json
func (o LogBindingOutput) PatternType() pulumi.StringOutput {
	return o.ApplyT(func(v *LogBinding) pulumi.StringOutput { return v.PatternType }).(pulumi.StringOutput)
}

// The specification id.
func (o LogBindingOutput) SpecId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogBinding) pulumi.StringOutput { return v.SpecId }).(pulumi.StringOutput)
}

type LogBindingArrayOutput struct{ *pulumi.OutputState }

func (LogBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogBinding)(nil)).Elem()
}

func (o LogBindingArrayOutput) ToLogBindingArrayOutput() LogBindingArrayOutput {
	return o
}

func (o LogBindingArrayOutput) ToLogBindingArrayOutputWithContext(ctx context.Context) LogBindingArrayOutput {
	return o
}

func (o LogBindingArrayOutput) Index(i pulumi.IntInput) LogBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogBinding {
		return vs[0].([]*LogBinding)[vs[1].(int)]
	}).(LogBindingOutput)
}

type LogBindingMapOutput struct{ *pulumi.OutputState }

func (LogBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogBinding)(nil)).Elem()
}

func (o LogBindingMapOutput) ToLogBindingMapOutput() LogBindingMapOutput {
	return o
}

func (o LogBindingMapOutput) ToLogBindingMapOutputWithContext(ctx context.Context) LogBindingMapOutput {
	return o
}

func (o LogBindingMapOutput) MapIndex(k pulumi.StringInput) LogBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogBinding {
		return vs[0].(map[string]*LogBinding)[vs[1].(string)]
	}).(LogBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogBindingInput)(nil)).Elem(), &LogBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogBindingArrayInput)(nil)).Elem(), LogBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogBindingMapInput)(nil)).Elem(), LogBindingMap{})
	pulumi.RegisterOutputType(LogBindingOutput{})
	pulumi.RegisterOutputType(LogBindingArrayOutput{})
	pulumi.RegisterOutputType(LogBindingMapOutput{})
}
