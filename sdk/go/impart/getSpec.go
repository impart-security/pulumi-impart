// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package impart

import (
	"context"
	"reflect"

	"github.com/impart-security/pulumi-impart/sdk/go/impart/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a specification.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/impart-security/pulumi-impart/sdk/go/impart"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := impart.GetSpec(ctx, &impart.LookupSpecArgs{
//				Id: "<id>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSpec(ctx *pulumi.Context, args *LookupSpecArgs, opts ...pulumi.InvokeOption) (*LookupSpecResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSpecResult
	err := ctx.Invoke("impart:index/getSpec:GetSpec", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking GetSpec.
type LookupSpecArgs struct {
	// Identifier for this specification.
	Id string `pulumi:"id"`
}

// A collection of values returned by GetSpec.
type LookupSpecResult struct {
	// Identifier for this specification.
	Id string `pulumi:"id"`
	// The name for this specification.
	Name string `pulumi:"name"`
}

func LookupSpecOutput(ctx *pulumi.Context, args LookupSpecOutputArgs, opts ...pulumi.InvokeOption) LookupSpecResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSpecResultOutput, error) {
			args := v.(LookupSpecArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupSpecResult
			secret, err := ctx.InvokePackageRaw("impart:index/getSpec:GetSpec", args, &rv, "", opts...)
			if err != nil {
				return LookupSpecResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupSpecResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupSpecResultOutput), nil
			}
			return output, nil
		}).(LookupSpecResultOutput)
}

// A collection of arguments for invoking GetSpec.
type LookupSpecOutputArgs struct {
	// Identifier for this specification.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupSpecOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSpecArgs)(nil)).Elem()
}

// A collection of values returned by GetSpec.
type LookupSpecResultOutput struct{ *pulumi.OutputState }

func (LookupSpecResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSpecResult)(nil)).Elem()
}

func (o LookupSpecResultOutput) ToLookupSpecResultOutput() LookupSpecResultOutput {
	return o
}

func (o LookupSpecResultOutput) ToLookupSpecResultOutputWithContext(ctx context.Context) LookupSpecResultOutput {
	return o
}

// Identifier for this specification.
func (o LookupSpecResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpecResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name for this specification.
func (o LookupSpecResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpecResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSpecResultOutput{})
}
