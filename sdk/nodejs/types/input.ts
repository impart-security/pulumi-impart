// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ListItem {
    /**
     * The list item expiration.
     */
    expiration?: pulumi.Input<string>;
    /**
     * The list item value.
     */
    value: pulumi.Input<string>;
}

export interface MonitorCondition {
    /**
     * Greater than, equal to, or less than (should be one of 'gt', 'lt', or 'eq')
     */
    comparator: pulumi.Input<string>;
    /**
     * In milliseconds, the offset from now() for the time window.
     */
    delay: pulumi.Input<number>;
    details: pulumi.Input<inputs.MonitorConditionDetails>;
    /**
     * Number of occurrences that need to execute to have this condition be true.
     */
    threshold: pulumi.Input<number>;
    /**
     * In milliseconds, the time span from now until when we should be counting events (for example, 60000 is all events in the last minute).
     */
    timePeriod: pulumi.Input<number>;
}

export interface MonitorConditionDetails {
    /**
     * Strictly for event type monitors. A slug of the action the monitor is tracking.
     */
    action?: pulumi.Input<string>;
    /**
     * Strictly for event type monitors. A slug of the actor type the monitor is tracking.
     */
    actorType?: pulumi.Input<string>;
    /**
     * Strictly for event type monitors. A slug of the subject type the monitor is tracking.
     */
    subjectType?: pulumi.Input<string>;
    /**
     * Strictly for metric type monitors. The tag the monitor is tracking.
     */
    tag?: pulumi.Input<string>;
    /**
     * The type of monitor (should be one of 'event' or 'metric'
     */
    type: pulumi.Input<string>;
}

export interface RuleScriptDependenciesDependency {
    /**
     * IDs of the rule script this rule depends on.
     */
    dependsOnRuleScriptIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the rule script
     */
    ruleScriptId: pulumi.Input<string>;
}

export interface RuleTestCaseAssertion {
    /**
     * The assertion type of the request.
     */
    assertionType: pulumi.Input<string>;
    /**
     * The condition of the assertion.
     * Accepted values per assertion type:
     * **output**: contains, not*contains.
     * **tags**: contains, not*contains.
     * **status_code**: equal, not*equal, greater*than, less*than, one*of.
     * **block**: N/A
     */
    condition?: pulumi.Input<string>;
    /**
     * The description of the assertion.
     */
    description?: pulumi.Input<string>;
    /**
     * The expected value of the assertion.
     * It is a string value, and the format it must satisfy depends on the assertion type:
     * **output**: A string.
     * **tags**: A string.
     * **status_code**: An integer value (e.g., "200") or comma-separated list of integers for oneOf condition (e.g., "200,404,500").
     * **block**: A boolean value represented as "true" or "false".
     */
    expected: pulumi.Input<string>;
    /**
     * The location of the assertion. Allowed values: req, res. Not applicable for assertion type output.
     */
    location?: pulumi.Input<string>;
    /**
     * The indexes of the messages in the test case the assertion applies to.
     */
    messageIndexes: pulumi.Input<pulumi.Input<number>[]>;
}

export interface RuleTestCaseMessage {
    /**
     * The number of times to include the message in the test case.
     */
    count?: pulumi.Input<number>;
    /**
     * The delay in milliseconds between message iterations.
     */
    delay?: pulumi.Input<number>;
    /**
     * The description of the test case message.
     */
    description?: pulumi.Input<string>;
    /**
     * The delay in milliseconds after a set of message iterations.
     */
    postDelay?: pulumi.Input<number>;
    /**
     * A payload sent to the inspector to inspect an HTTP request.
     */
    req: pulumi.Input<inputs.RuleTestCaseMessageReq>;
    /**
     * A payload sent to the inspector to inspect an HTTP response.
     */
    res: pulumi.Input<inputs.RuleTestCaseMessageRes>;
}

export interface RuleTestCaseMessageReq {
    /**
     * The base64 encoded HTTP request body.
     */
    body?: pulumi.Input<string>;
    /**
     * The HTTP request cookie keys.
     */
    cookieKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The HTTP request cookie values.
     */
    cookieValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The HTTP request header keys.
     */
    headerKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The HTTP request header values.
     */
    headerValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The method of the request.
     */
    method: pulumi.Input<string>;
    /**
     * The remote address of the request.
     */
    remoteAddr?: pulumi.Input<string>;
    /**
     * Indicates whether the request body was truncated.
     */
    truncatedBody?: pulumi.Input<boolean>;
    /**
     * The URL of the request.
     */
    url: pulumi.Input<string>;
}

export interface RuleTestCaseMessageRes {
    /**
     * The base64 encoded HTTP response body.
     */
    body?: pulumi.Input<string>;
    /**
     * The HTTP response header keys.
     */
    headerKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The HTTP response header values.
     */
    headerValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The HTTP response status code.
     */
    statusCode: pulumi.Input<number>;
    /**
     * Indicates whether the response body was truncated.
     */
    truncatedBody?: pulumi.Input<boolean>;
}
