// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BindingArgs, BindingState } from "./binding";
export type Binding = import("./binding").Binding;
export const Binding: typeof import("./binding").Binding = null as any;
utilities.lazyLoad(exports, ["Binding"], () => require("./binding"));

export { GetSpecArgs, GetSpecResult, GetSpecOutputArgs } from "./getSpec";
export const getSpec: typeof import("./getSpec").getSpec = null as any;
export const getSpecOutput: typeof import("./getSpec").getSpecOutput = null as any;
utilities.lazyLoad(exports, ["getSpec","getSpecOutput"], () => require("./getSpec"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RuleScriptArgs, RuleScriptState } from "./ruleScript";
export type RuleScript = import("./ruleScript").RuleScript;
export const RuleScript: typeof import("./ruleScript").RuleScript = null as any;
utilities.lazyLoad(exports, ["RuleScript"], () => require("./ruleScript"));

export { SpecArgs, SpecState } from "./spec";
export type Spec = import("./spec").Spec;
export const Spec: typeof import("./spec").Spec = null as any;
utilities.lazyLoad(exports, ["Spec"], () => require("./spec"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "impart:index/binding:Binding":
                return new Binding(name, <any>undefined, { urn })
            case "impart:index/ruleScript:RuleScript":
                return new RuleScript(name, <any>undefined, { urn })
            case "impart:index/spec:Spec":
                return new Spec(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("impart", "index/binding", _module)
pulumi.runtime.registerResourceModule("impart", "index/ruleScript", _module)
pulumi.runtime.registerResourceModule("impart", "index/spec", _module)
pulumi.runtime.registerResourcePackage("impart", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:impart") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
