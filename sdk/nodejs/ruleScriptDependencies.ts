// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manage rule script dependencies. There should only ever be one instance of this resource in a workspace at once, because it manages rule script dependencies at an organization level.
 */
export class RuleScriptDependencies extends pulumi.CustomResource {
    /**
     * Get an existing RuleScriptDependencies resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleScriptDependenciesState, opts?: pulumi.CustomResourceOptions): RuleScriptDependencies {
        return new RuleScriptDependencies(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'impart:index/ruleScriptDependencies:RuleScriptDependencies';

    /**
     * Returns true if the given object is an instance of RuleScriptDependencies.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuleScriptDependencies {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleScriptDependencies.__pulumiType;
    }

    /**
     * An array of rule scripts and the other ids of the rules they depend on before executing.
     */
    public readonly dependencies!: pulumi.Output<outputs.RuleScriptDependenciesDependency[]>;

    /**
     * Create a RuleScriptDependencies resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleScriptDependenciesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleScriptDependenciesArgs | RuleScriptDependenciesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleScriptDependenciesState | undefined;
            resourceInputs["dependencies"] = state ? state.dependencies : undefined;
        } else {
            const args = argsOrState as RuleScriptDependenciesArgs | undefined;
            if ((!args || args.dependencies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dependencies'");
            }
            resourceInputs["dependencies"] = args ? args.dependencies : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RuleScriptDependencies.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RuleScriptDependencies resources.
 */
export interface RuleScriptDependenciesState {
    /**
     * An array of rule scripts and the other ids of the rules they depend on before executing.
     */
    dependencies?: pulumi.Input<pulumi.Input<inputs.RuleScriptDependenciesDependency>[]>;
}

/**
 * The set of arguments for constructing a RuleScriptDependencies resource.
 */
export interface RuleScriptDependenciesArgs {
    /**
     * An array of rule scripts and the other ids of the rules they depend on before executing.
     */
    dependencies: pulumi.Input<pulumi.Input<inputs.RuleScriptDependenciesDependency>[]>;
}
