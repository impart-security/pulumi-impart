// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manage a monitor.
 */
export class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorState, opts?: pulumi.CustomResourceOptions): Monitor {
        return new Monitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'impart:index/monitor:Monitor';

    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Monitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitor.__pulumiType;
    }

    /**
     * An array of conditions for which the monitor will trigger.
     */
    public readonly conditions!: pulumi.Output<outputs.MonitorCondition[]>;
    /**
     * The description for this monitor.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name for this monitor.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * An array of notification template ids for the templates that will send notifications to their respective connectors.
     */
    public readonly notificationTemplateIds!: pulumi.Output<string[]>;

    /**
     * Create a Monitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorArgs | MonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorState | undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationTemplateIds"] = state ? state.notificationTemplateIds : undefined;
        } else {
            const args = argsOrState as MonitorArgs | undefined;
            if ((!args || args.conditions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conditions'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.notificationTemplateIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationTemplateIds'");
            }
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationTemplateIds"] = args ? args.notificationTemplateIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Monitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Monitor resources.
 */
export interface MonitorState {
    /**
     * An array of conditions for which the monitor will trigger.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.MonitorCondition>[]>;
    /**
     * The description for this monitor.
     */
    description?: pulumi.Input<string>;
    /**
     * The name for this monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of notification template ids for the templates that will send notifications to their respective connectors.
     */
    notificationTemplateIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Monitor resource.
 */
export interface MonitorArgs {
    /**
     * An array of conditions for which the monitor will trigger.
     */
    conditions: pulumi.Input<pulumi.Input<inputs.MonitorCondition>[]>;
    /**
     * The description for this monitor.
     */
    description: pulumi.Input<string>;
    /**
     * The name for this monitor.
     */
    name: pulumi.Input<string>;
    /**
     * An array of notification template ids for the templates that will send notifications to their respective connectors.
     */
    notificationTemplateIds: pulumi.Input<pulumi.Input<string>[]>;
}
