// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as impart from "@impart-security/pulumi-impart";
 *
 * // Create a new rule client identifier
 * const clientIdentifier = new impart.RuleClientIdentifier("clientIdentifier", {
 *     description: "terraform client identifier",
 *     hashFields: [
 *         {
 *             field: "header_value",
 *             key: "Authorization",
 *         },
 *         {
 *             field: "client_ip",
 *         },
 *     ],
 *     name: "client identifier",
 * });
 * ```
 */
export class RuleClientIdentifier extends pulumi.CustomResource {
    /**
     * Get an existing RuleClientIdentifier resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleClientIdentifierState, opts?: pulumi.CustomResourceOptions): RuleClientIdentifier {
        return new RuleClientIdentifier(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'impart:index/ruleClientIdentifier:RuleClientIdentifier';

    /**
     * Returns true if the given object is an instance of RuleClientIdentifier.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuleClientIdentifier {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleClientIdentifier.__pulumiType;
    }

    /**
     * The description for the rule client identifier.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The hash fields for the rule client identifier.
     */
    public readonly hashFields!: pulumi.Output<outputs.RuleClientIdentifierHashField[]>;
    /**
     * The name for the rule client identifier.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The storage id for the rule client identifier.
     */
    public readonly storageId!: pulumi.Output<string | undefined>;

    /**
     * Create a RuleClientIdentifier resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleClientIdentifierArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleClientIdentifierArgs | RuleClientIdentifierState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleClientIdentifierState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hashFields"] = state ? state.hashFields : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["storageId"] = state ? state.storageId : undefined;
        } else {
            const args = argsOrState as RuleClientIdentifierArgs | undefined;
            if ((!args || args.hashFields === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hashFields'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hashFields"] = args ? args.hashFields : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["storageId"] = args ? args.storageId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RuleClientIdentifier.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RuleClientIdentifier resources.
 */
export interface RuleClientIdentifierState {
    /**
     * The description for the rule client identifier.
     */
    description?: pulumi.Input<string>;
    /**
     * The hash fields for the rule client identifier.
     */
    hashFields?: pulumi.Input<pulumi.Input<inputs.RuleClientIdentifierHashField>[]>;
    /**
     * The name for the rule client identifier.
     */
    name?: pulumi.Input<string>;
    /**
     * The storage id for the rule client identifier.
     */
    storageId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RuleClientIdentifier resource.
 */
export interface RuleClientIdentifierArgs {
    /**
     * The description for the rule client identifier.
     */
    description?: pulumi.Input<string>;
    /**
     * The hash fields for the rule client identifier.
     */
    hashFields: pulumi.Input<pulumi.Input<inputs.RuleClientIdentifierHashField>[]>;
    /**
     * The name for the rule client identifier.
     */
    name: pulumi.Input<string>;
    /**
     * The storage id for the rule client identifier.
     */
    storageId?: pulumi.Input<string>;
}
