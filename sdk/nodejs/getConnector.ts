// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manage a connector.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as impart from "@pulumi/impart";
 *
 * const exampleConnector = impart.GetConnector({
 *     id: "<id>",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getConnector(args: GetConnectorArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("impart:index/getConnector:GetConnector", {
        "connectorTypeId": args.connectorTypeId,
        "id": args.id,
        "isConnected": args.isConnected,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking GetConnector.
 */
export interface GetConnectorArgs {
    /**
     * ID of the connector type (eg. ID for our Slack or Jira connector types).
     */
    connectorTypeId?: string;
    /**
     * Identifier for this connector.
     */
    id: string;
    /**
     * Whether or not the connector is authenticated via OAuth2.
     */
    isConnected?: boolean;
    /**
     * Name for this connector.
     */
    name?: string;
}

/**
 * A collection of values returned by GetConnector.
 */
export interface GetConnectorResult {
    /**
     * ID of the connector type (eg. ID for our Slack or Jira connector types).
     */
    readonly connectorTypeId?: string;
    /**
     * Identifier for this connector.
     */
    readonly id: string;
    /**
     * Whether or not the connector is authenticated via OAuth2.
     */
    readonly isConnected?: boolean;
    /**
     * Name for this connector.
     */
    readonly name?: string;
}
/**
 * Manage a connector.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as impart from "@pulumi/impart";
 *
 * const exampleConnector = impart.GetConnector({
 *     id: "<id>",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getConnectorOutput(args: GetConnectorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConnectorResult> {
    return pulumi.output(args).apply((a: any) => getConnector(a, opts))
}

/**
 * A collection of arguments for invoking GetConnector.
 */
export interface GetConnectorOutputArgs {
    /**
     * ID of the connector type (eg. ID for our Slack or Jira connector types).
     */
    connectorTypeId?: pulumi.Input<string>;
    /**
     * Identifier for this connector.
     */
    id: pulumi.Input<string>;
    /**
     * Whether or not the connector is authenticated via OAuth2.
     */
    isConnected?: pulumi.Input<boolean>;
    /**
     * Name for this connector.
     */
    name?: pulumi.Input<string>;
}
