// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manage a binding.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as impart from "@impart-security/pulumi-impart";
 *
 * // Create a new binding
 * const example = new impart.Binding("example", {
 *     name: "binding_example",
 *     port: 443,
 *     specId: resource.impart_spec.example.id,
 *     hostname: "example.com",
 *     basePath: "/",
 * });
 * ```
 */
export class Binding extends pulumi.CustomResource {
    /**
     * Get an existing Binding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BindingState, opts?: pulumi.CustomResourceOptions): Binding {
        return new Binding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'impart:index/binding:Binding';

    /**
     * Returns true if the given object is an instance of Binding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Binding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Binding.__pulumiType;
    }

    /**
     * The basePath for this binding.
     */
    public readonly basePath!: pulumi.Output<string>;
    /**
     * The hostname for this binding.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * The name for this binding.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The port for this binding.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The specification id.
     */
    public readonly specId!: pulumi.Output<string>;
    /**
     * The upstreamOrigin for this binding.
     */
    public readonly upstreamOrigin!: pulumi.Output<string | undefined>;

    /**
     * Create a Binding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BindingArgs | BindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BindingState | undefined;
            resourceInputs["basePath"] = state ? state.basePath : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["specId"] = state ? state.specId : undefined;
            resourceInputs["upstreamOrigin"] = state ? state.upstreamOrigin : undefined;
        } else {
            const args = argsOrState as BindingArgs | undefined;
            if ((!args || args.basePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'basePath'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.specId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'specId'");
            }
            resourceInputs["basePath"] = args ? args.basePath : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["specId"] = args ? args.specId : undefined;
            resourceInputs["upstreamOrigin"] = args ? args.upstreamOrigin : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Binding.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Binding resources.
 */
export interface BindingState {
    /**
     * The basePath for this binding.
     */
    basePath?: pulumi.Input<string>;
    /**
     * The hostname for this binding.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The name for this binding.
     */
    name?: pulumi.Input<string>;
    /**
     * The port for this binding.
     */
    port?: pulumi.Input<number>;
    /**
     * The specification id.
     */
    specId?: pulumi.Input<string>;
    /**
     * The upstreamOrigin for this binding.
     */
    upstreamOrigin?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Binding resource.
 */
export interface BindingArgs {
    /**
     * The basePath for this binding.
     */
    basePath: pulumi.Input<string>;
    /**
     * The hostname for this binding.
     */
    hostname: pulumi.Input<string>;
    /**
     * The name for this binding.
     */
    name: pulumi.Input<string>;
    /**
     * The port for this binding.
     */
    port: pulumi.Input<number>;
    /**
     * The specification id.
     */
    specId: pulumi.Input<string>;
    /**
     * The upstreamOrigin for this binding.
     */
    upstreamOrigin?: pulumi.Input<string>;
}
