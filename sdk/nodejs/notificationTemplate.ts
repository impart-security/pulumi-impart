// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manage an notification template.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as impart from "@impart-security/pulumi-impart";
 *
 * // Create a new notification template
 * const example = new impart.NotificationTemplate("example", {
 *     connectorId: "<example_connector.id>",
 *     destinations: ["test-destination-id"],
 *     name: "notification_template_example",
 *     payload: "This is a test message payload",
 *     subject: "Test subject",
 * });
 * ```
 */
export class NotificationTemplate extends pulumi.CustomResource {
    /**
     * Get an existing NotificationTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationTemplateState, opts?: pulumi.CustomResourceOptions): NotificationTemplate {
        return new NotificationTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'impart:index/notificationTemplate:NotificationTemplate';

    /**
     * Returns true if the given object is an instance of NotificationTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationTemplate.__pulumiType;
    }

    /**
     * The connector id.
     */
    public readonly connectorId!: pulumi.Output<string>;
    /**
     * An array of destination ids to which the payloads will be sent.
     */
    public readonly destinations!: pulumi.Output<string[]>;
    /**
     * The name for this notification template.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The payload message that will be sent to the Third Party API.
     */
    public readonly payload!: pulumi.Output<string>;
    /**
     * The subject message that will be sent to the Third Party API.
     */
    public readonly subject!: pulumi.Output<string>;

    /**
     * Create a NotificationTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationTemplateArgs | NotificationTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationTemplateState | undefined;
            resourceInputs["connectorId"] = state ? state.connectorId : undefined;
            resourceInputs["destinations"] = state ? state.destinations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["payload"] = state ? state.payload : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
        } else {
            const args = argsOrState as NotificationTemplateArgs | undefined;
            if ((!args || args.connectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorId'");
            }
            if ((!args || args.destinations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinations'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.payload === undefined) && !opts.urn) {
                throw new Error("Missing required property 'payload'");
            }
            if ((!args || args.subject === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subject'");
            }
            resourceInputs["connectorId"] = args ? args.connectorId : undefined;
            resourceInputs["destinations"] = args ? args.destinations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["payload"] = args ? args.payload : undefined;
            resourceInputs["subject"] = args ? args.subject : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NotificationTemplate resources.
 */
export interface NotificationTemplateState {
    /**
     * The connector id.
     */
    connectorId?: pulumi.Input<string>;
    /**
     * An array of destination ids to which the payloads will be sent.
     */
    destinations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name for this notification template.
     */
    name?: pulumi.Input<string>;
    /**
     * The payload message that will be sent to the Third Party API.
     */
    payload?: pulumi.Input<string>;
    /**
     * The subject message that will be sent to the Third Party API.
     */
    subject?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NotificationTemplate resource.
 */
export interface NotificationTemplateArgs {
    /**
     * The connector id.
     */
    connectorId: pulumi.Input<string>;
    /**
     * An array of destination ids to which the payloads will be sent.
     */
    destinations: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name for this notification template.
     */
    name: pulumi.Input<string>;
    /**
     * The payload message that will be sent to the Third Party API.
     */
    payload: pulumi.Input<string>;
    /**
     * The subject message that will be sent to the Third Party API.
     */
    subject: pulumi.Input<string>;
}
