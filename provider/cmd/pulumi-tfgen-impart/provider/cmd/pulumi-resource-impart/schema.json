{
    "name": "impart",
    "description": "A Pulumi package for creating and managing Impart resources.",
    "keywords": [
        "pulumi",
        "impart"
    ],
    "homepage": "https://www.impart.security/",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`impart` Terraform Provider](https://github.com/impart-security/terraform-provider-impart).",
    "repository": "https://github.com/impart-security/pulumi-provider-impart",
    "pluginDownloadURL": "https://github.com/impart-security/pulumi-provider-impart/releases",
    "publisher": "Impart Security",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/impart-security/pulumi-provider-impart/sdk/go/impart"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Impart resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/impart-security/terraform-provider-impart)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-impart` repo](https://github.com/impart-security/pulumi-provider-impart/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-impart` repo](https://github.com/impart-security/terraform-provider-impart/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/impart-security/terraform-provider-impart)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-impart` repo](https://github.com/impart-security/pulumi-provider-impart/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-impart` repo](https://github.com/impart-security/terraform-provider-impart/issues)."
        }
    },
    "config": {
        "variables": {
            "endpoint": {
                "type": "string",
                "description": "The Impart api endpoint\n",
                "defaultInfo": {
                    "environment": [
                        "IMPART_ENDPOINT"
                    ]
                }
            },
            "token": {
                "type": "string",
                "description": "The Impart api token\n",
                "defaultInfo": {
                    "environment": [
                        "IMPART_TOKEN"
                    ]
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the impart package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "endpoint": {
                "type": "string",
                "description": "The Impart api endpoint\n"
            },
            "token": {
                "type": "string",
                "description": "The Impart api token\n"
            }
        },
        "inputProperties": {
            "endpoint": {
                "type": "string",
                "description": "The Impart api endpoint\n",
                "defaultInfo": {
                    "environment": [
                        "IMPART_ENDPOINT"
                    ]
                }
            },
            "token": {
                "type": "string",
                "description": "The Impart api token\n",
                "defaultInfo": {
                    "environment": [
                        "IMPART_TOKEN"
                    ]
                }
            }
        }
    },
    "resources": {
        "impart:index/binding:Binding": {
            "description": "Manage a binding.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as impart from \"@pulumi/impart\";\n\n// Create a new binding\nconst example = new impart.Binding(\"example\", {\n    name: \"binding_example\",\n    port: 443,\n    specId: resource.impart_spec.example.id,\n    hostname: \"example.com\",\n    basePath: \"/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_impart as impart\n\n# Create a new binding\nexample = impart.Binding(\"example\",\n    name=\"binding_example\",\n    port=443,\n    spec_id=resource[\"impart_spec\"][\"example\"][\"id\"],\n    hostname=\"example.com\",\n    base_path=\"/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Impart = Pulumi.Impart;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new binding\n    var example = new Impart.Binding(\"example\", new()\n    {\n        Name = \"binding_example\",\n        Port = 443,\n        SpecId = resource.Impart_spec.Example.Id,\n        Hostname = \"example.com\",\n        BasePath = \"/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/impart-security/pulumi-provider-impart/sdk/go/impart\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := impart.NewBinding(ctx, \"example\", \u0026impart.BindingArgs{\n\t\t\tName:     pulumi.String(\"binding_example\"),\n\t\t\tPort:     pulumi.Int(443),\n\t\t\tSpecId:   pulumi.Any(resource.Impart_spec.Example.Id),\n\t\t\tHostname: pulumi.String(\"example.com\"),\n\t\t\tBasePath: pulumi.String(\"/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.impart.Binding;\nimport com.pulumi.impart.BindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Binding(\"example\", BindingArgs.builder()        \n            .name(\"binding_example\")\n            .port(443)\n            .specId(resource.impart_spec().example().id())\n            .hostname(\"example.com\")\n            .basePath(\"/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new binding\n  example:\n    type: impart:Binding\n    properties:\n      name: binding_example\n      port: 443\n      specId: ${resource.impart_spec.example.id}\n      hostname: example.com\n      basePath: /\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "basePath": {
                    "type": "string",
                    "description": "The base_path for this binding.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname for this binding.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this binding.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port for this binding.\n"
                },
                "specId": {
                    "type": "string",
                    "description": "The specification id.\n"
                },
                "upstreamOrigin": {
                    "type": "string",
                    "description": "The upstream_origin for this binding.\n"
                }
            },
            "required": [
                "basePath",
                "hostname",
                "name",
                "port",
                "specId"
            ],
            "inputProperties": {
                "basePath": {
                    "type": "string",
                    "description": "The base_path for this binding.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname for this binding.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this binding.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port for this binding.\n"
                },
                "specId": {
                    "type": "string",
                    "description": "The specification id.\n"
                },
                "upstreamOrigin": {
                    "type": "string",
                    "description": "The upstream_origin for this binding.\n"
                }
            },
            "requiredInputs": [
                "basePath",
                "hostname",
                "name",
                "port",
                "specId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Binding resources.\n",
                "properties": {
                    "basePath": {
                        "type": "string",
                        "description": "The base_path for this binding.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname for this binding.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for this binding.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port for this binding.\n"
                    },
                    "specId": {
                        "type": "string",
                        "description": "The specification id.\n"
                    },
                    "upstreamOrigin": {
                        "type": "string",
                        "description": "The upstream_origin for this binding.\n"
                    }
                },
                "type": "object"
            }
        },
        "impart:index/ruleScript:RuleScript": {
            "description": "Manage a rule script.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description for this rule script.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Set true to disable the rule script.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this rule script.\n"
                },
                "sourceFile": {
                    "type": "string",
                    "description": "The rule source file.\n"
                },
                "sourceHash": {
                    "type": "string",
                    "description": "The rule source hash.\n"
                }
            },
            "required": [
                "disabled",
                "name",
                "sourceFile"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description for this rule script.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Set true to disable the rule script.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this rule script.\n"
                },
                "sourceFile": {
                    "type": "string",
                    "description": "The rule source file.\n"
                },
                "sourceHash": {
                    "type": "string",
                    "description": "The rule source hash.\n"
                }
            },
            "requiredInputs": [
                "disabled",
                "name",
                "sourceFile"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RuleScript resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description for this rule script.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Set true to disable the rule script.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for this rule script.\n"
                    },
                    "sourceFile": {
                        "type": "string",
                        "description": "The rule source file.\n"
                    },
                    "sourceHash": {
                        "type": "string",
                        "description": "The rule source hash.\n"
                    }
                },
                "type": "object"
            }
        },
        "impart:index/spec:Spec": {
            "description": "Manage a specification.\n\n\n## Import\n\n#!/bin/bash\n\n```sh\n $ pulumi import impart:index/spec:Spec example \"\u003cid\u003e\"\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for this specification.\n"
                },
                "sourceFile": {
                    "type": "string",
                    "description": "The specification file.\n"
                },
                "sourceHash": {
                    "type": "string",
                    "description": "The specification source hash.\n"
                }
            },
            "required": [
                "name",
                "sourceFile"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name for this specification.\n"
                },
                "sourceFile": {
                    "type": "string",
                    "description": "The specification file.\n"
                },
                "sourceHash": {
                    "type": "string",
                    "description": "The specification source hash.\n"
                }
            },
            "requiredInputs": [
                "name",
                "sourceFile"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Spec resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name for this specification.\n"
                    },
                    "sourceFile": {
                        "type": "string",
                        "description": "The specification file.\n"
                    },
                    "sourceHash": {
                        "type": "string",
                        "description": "The specification source hash.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "impart:index/getSpec:GetSpec": {
            "description": "Manage a specification.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as impart from \"@pulumi/impart\";\n\nconst example = impart.GetSpec({\n    id: \"\u003cid\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_impart as impart\n\nexample = impart.get_spec(id=\"\u003cid\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Impart = Pulumi.Impart;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Impart.GetSpec.Invoke(new()\n    {\n        Id = \"\u003cid\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/impart-security/pulumi-provider-impart/sdk/go/impart\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := impart.GetSpec(ctx, \u0026impart.LookupSpecArgs{\n\t\t\tId: \"\u003cid\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.impart.ImpartFunctions;\nimport com.pulumi.impart.inputs.GetSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ImpartFunctions.GetSpec(GetSpecArgs.builder()\n            .id(\"\u003cid\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: impart:GetSpec\n      Arguments:\n        id: \u003cid\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetSpec.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Identifier for this specification.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetSpec.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Identifier for this specification.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for this specification.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name"
                ]
            }
        }
    }
}