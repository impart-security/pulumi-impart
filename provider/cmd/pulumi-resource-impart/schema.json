{
    "name": "impart",
    "displayName": "Impart Security",
    "description": "A Pulumi package for creating and managing Impart resources.",
    "keywords": [
        "pulumi",
        "impart",
        "category/infrastructure"
    ],
    "homepage": "https://www.impart.security/",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`impart` Terraform Provider](https://github.com/impart-security/terraform-provider-impart).",
    "repository": "https://github.com/impart-security/pulumi-impart",
    "logoUrl": "https://console.impartsecurity.net/logo-blue-black.svg",
    "pluginDownloadURL": "github://api.github.com/impart-security",
    "publisher": "Impart Security",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "go": {
            "importBasePath": "github.com/impart-security/pulumi-impart/sdk/go/impart",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@impart-security/pulumi-impart",
            "packageDescription": "A Pulumi package for creating and managing Impart resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/impart-security/terraform-provider-impart)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-impart` repo](https://github.com/impart-security/pulumi-impart/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-impart` repo](https://github.com/impart-security/terraform-provider-impart/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "typescriptVersion": "^5.4.3",
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/impart-security/terraform-provider-impart)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-impart` repo](https://github.com/impart-security/pulumi-impart/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-impart` repo](https://github.com/impart-security/terraform-provider-impart/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "endpoint": {
                "type": "string",
                "description": "The Impart api endpoint\n",
                "defaultInfo": {
                    "environment": [
                        "IMPART_ENDPOINT"
                    ]
                }
            },
            "token": {
                "type": "string",
                "description": "The Impart api token\n",
                "defaultInfo": {
                    "environment": [
                        "IMPART_TOKEN"
                    ]
                }
            }
        }
    },
    "types": {
        "impart:index/ListItem:ListItem": {
            "properties": {
                "expiration": {
                    "type": "string",
                    "description": "The list item expiration.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The list item value.\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "impart:index/MonitorCondition:MonitorCondition": {
            "properties": {
                "comparator": {
                    "type": "string",
                    "description": "Greater than, equal to, or less than (should be one of 'gt', 'lt', or 'eq')\n"
                },
                "delay": {
                    "type": "integer",
                    "description": "In milliseconds, the offset from now() for the time window.\n"
                },
                "details": {
                    "$ref": "#/types/impart:index/MonitorConditionDetails:MonitorConditionDetails"
                },
                "threshold": {
                    "type": "integer",
                    "description": "Number of occurrences that need to execute to have this condition be true.\n"
                },
                "timePeriod": {
                    "type": "integer",
                    "description": "In milliseconds, the time span from now until when we should be counting events (for example, 60000 is all events in the last minute).\n"
                }
            },
            "type": "object",
            "required": [
                "comparator",
                "delay",
                "details",
                "threshold",
                "timePeriod"
            ]
        },
        "impart:index/MonitorConditionDetails:MonitorConditionDetails": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Strictly for event type monitors. A slug of the action the monitor is tracking.\n"
                },
                "actorType": {
                    "type": "string",
                    "description": "Strictly for event type monitors. A slug of the actor type the monitor is tracking.\n"
                },
                "subjectType": {
                    "type": "string",
                    "description": "Strictly for event type monitors. A slug of the subject type the monitor is tracking.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Strictly for metric type monitors. The tag the monitor is tracking.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of monitor (should be one of 'event' or 'metric'\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "impart:index/RuleScriptDependenciesDependency:RuleScriptDependenciesDependency": {
            "properties": {
                "dependsOnRuleScriptIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the rule script this rule depends on.\n"
                },
                "ruleScriptId": {
                    "type": "string",
                    "description": "The ID of the rule script\n"
                }
            },
            "type": "object",
            "required": [
                "dependsOnRuleScriptIds",
                "ruleScriptId"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the impart package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "endpoint": {
                "type": "string",
                "description": "The Impart api endpoint\n"
            },
            "token": {
                "type": "string",
                "description": "The Impart api token\n"
            }
        },
        "inputProperties": {
            "endpoint": {
                "type": "string",
                "description": "The Impart api endpoint\n",
                "defaultInfo": {
                    "environment": [
                        "IMPART_ENDPOINT"
                    ]
                }
            },
            "token": {
                "type": "string",
                "description": "The Impart api token\n",
                "defaultInfo": {
                    "environment": [
                        "IMPART_TOKEN"
                    ]
                }
            }
        }
    },
    "resources": {
        "impart:index/apiBinding:ApiBinding": {
            "description": "Manage an api binding.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as impart from \"@impart-security/pulumi-impart\";\n\n// Create a new api binding\nconst example = new impart.ApiBinding(\"example\", {\n    name: \"api_binding_example\",\n    port: 443,\n    specId: resource.impart_spec.example.id,\n    hostname: \"example.com\",\n    basePath: \"/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_impart as impart\n\n# Create a new api binding\nexample = impart.ApiBinding(\"example\",\n    name=\"api_binding_example\",\n    port=443,\n    spec_id=resource[\"impart_spec\"][\"example\"][\"id\"],\n    hostname=\"example.com\",\n    base_path=\"/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Impart = Pulumi.Impart;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new api binding\n    var example = new Impart.ApiBinding(\"example\", new()\n    {\n        Name = \"api_binding_example\",\n        Port = 443,\n        SpecId = resource.Impart_spec.Example.Id,\n        Hostname = \"example.com\",\n        BasePath = \"/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/impart-security/pulumi-impart/sdk/go/impart\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new api binding\n\t\t_, err := impart.NewApiBinding(ctx, \"example\", \u0026impart.ApiBindingArgs{\n\t\t\tName:     pulumi.String(\"api_binding_example\"),\n\t\t\tPort:     pulumi.Int(443),\n\t\t\tSpecId:   pulumi.Any(resource.Impart_spec.Example.Id),\n\t\t\tHostname: pulumi.String(\"example.com\"),\n\t\t\tBasePath: pulumi.String(\"/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.impart.ApiBinding;\nimport com.pulumi.impart.ApiBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new api binding\n        var example = new ApiBinding(\"example\", ApiBindingArgs.builder()\n            .name(\"api_binding_example\")\n            .port(443)\n            .specId(resource.impart_spec().example().id())\n            .hostname(\"example.com\")\n            .basePath(\"/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new api binding\n  example:\n    type: impart:ApiBinding\n    properties:\n      name: api_binding_example\n      port: 443\n      specId: ${resource.impart_spec.example.id}\n      hostname: example.com\n      basePath: /\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "basePath": {
                    "type": "string",
                    "description": "The base_path for this api binding.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "The disabled for this api binding.\n"
                },
                "forwardedFors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The forwarded_for for this api binding.\n"
                },
                "forwardedHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The forwarded_host for this api binding.\n"
                },
                "forwardedIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The forwarded_id for this api binding.\n"
                },
                "forwardedProtos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The forwarded_proto for this api binding.\n"
                },
                "hops": {
                    "type": "integer",
                    "description": "The hops for this api binding.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname for this api binding.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this api binding.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port for this api binding.\n"
                },
                "specId": {
                    "type": "string",
                    "description": "The specification id.\n"
                },
                "upstreamOrigin": {
                    "type": "string",
                    "description": "The upstream_origin for this api binding.\n"
                },
                "useForwarded": {
                    "type": "boolean",
                    "description": "The use_forwarded for this api binding.\n"
                }
            },
            "required": [
                "basePath",
                "hostname",
                "name",
                "port",
                "specId"
            ],
            "inputProperties": {
                "basePath": {
                    "type": "string",
                    "description": "The base_path for this api binding.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "The disabled for this api binding.\n"
                },
                "forwardedFors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The forwarded_for for this api binding.\n"
                },
                "forwardedHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The forwarded_host for this api binding.\n"
                },
                "forwardedIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The forwarded_id for this api binding.\n"
                },
                "forwardedProtos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The forwarded_proto for this api binding.\n"
                },
                "hops": {
                    "type": "integer",
                    "description": "The hops for this api binding.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname for this api binding.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this api binding.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port for this api binding.\n"
                },
                "specId": {
                    "type": "string",
                    "description": "The specification id.\n"
                },
                "upstreamOrigin": {
                    "type": "string",
                    "description": "The upstream_origin for this api binding.\n"
                },
                "useForwarded": {
                    "type": "boolean",
                    "description": "The use_forwarded for this api binding.\n"
                }
            },
            "requiredInputs": [
                "basePath",
                "hostname",
                "name",
                "port",
                "specId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiBinding resources.\n",
                "properties": {
                    "basePath": {
                        "type": "string",
                        "description": "The base_path for this api binding.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "The disabled for this api binding.\n"
                    },
                    "forwardedFors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The forwarded_for for this api binding.\n"
                    },
                    "forwardedHosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The forwarded_host for this api binding.\n"
                    },
                    "forwardedIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The forwarded_id for this api binding.\n"
                    },
                    "forwardedProtos": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The forwarded_proto for this api binding.\n"
                    },
                    "hops": {
                        "type": "integer",
                        "description": "The hops for this api binding.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname for this api binding.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for this api binding.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port for this api binding.\n"
                    },
                    "specId": {
                        "type": "string",
                        "description": "The specification id.\n"
                    },
                    "upstreamOrigin": {
                        "type": "string",
                        "description": "The upstream_origin for this api binding.\n"
                    },
                    "useForwarded": {
                        "type": "boolean",
                        "description": "The use_forwarded for this api binding.\n"
                    }
                },
                "type": "object"
            }
        },
        "impart:index/list:List": {
            "description": "Manage a list.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as impart from \"@impart-security/pulumi-impart\";\n\n// Create a new list\nconst example = new impart.List(\"example\", {\n    items: [\n        {\n            value: \"item1\",\n        },\n        {\n            value: \"item2\",\n        },\n    ],\n    kind: \"string\",\n    name: \"list_example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_impart as impart\n\n# Create a new list\nexample = impart.List(\"example\",\n    items=[\n        impart.ListItemArgs(\n            value=\"item1\",\n        ),\n        impart.ListItemArgs(\n            value=\"item2\",\n        ),\n    ],\n    kind=\"string\",\n    name=\"list_example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Impart = Pulumi.Impart;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new list\n    var example = new Impart.List(\"example\", new()\n    {\n        Items = new[]\n        {\n            new Impart.Inputs.ListItemArgs\n            {\n                Value = \"item1\",\n            },\n            new Impart.Inputs.ListItemArgs\n            {\n                Value = \"item2\",\n            },\n        },\n        Kind = \"string\",\n        Name = \"list_example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/impart-security/pulumi-impart/sdk/go/impart\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new list\n\t\t_, err := impart.NewList(ctx, \"example\", \u0026impart.ListArgs{\n\t\t\tItems: impart.ListItemArray{\n\t\t\t\t\u0026impart.ListItemArgs{\n\t\t\t\t\tValue: pulumi.String(\"item1\"),\n\t\t\t\t},\n\t\t\t\t\u0026impart.ListItemArgs{\n\t\t\t\t\tValue: pulumi.String(\"item2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tKind: pulumi.String(\"string\"),\n\t\t\tName: pulumi.String(\"list_example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.impart.List;\nimport com.pulumi.impart.ListArgs;\nimport com.pulumi.impart.inputs.ListItemArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new list\n        var example = new List(\"example\", ListArgs.builder()\n            .items(            \n                ListItemArgs.builder()\n                    .value(\"item1\")\n                    .build(),\n                ListItemArgs.builder()\n                    .value(\"item2\")\n                    .build())\n            .kind(\"string\")\n            .name(\"list_example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new list\n  example:\n    type: impart:List\n    properties:\n      items:\n        - value: item1\n        - value: item2\n      kind: string\n      name: list_example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "functionality": {
                    "type": "string",
                    "description": "The list functionality. Allowed values are add, add/remove, none.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/impart:index/ListItem:ListItem"
                    },
                    "description": "The list items.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The list kind.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this list.\n"
                },
                "subkind": {
                    "type": "string",
                    "description": "The list subkind.\n"
                }
            },
            "required": [
                "kind",
                "name"
            ],
            "inputProperties": {
                "functionality": {
                    "type": "string",
                    "description": "The list functionality. Allowed values are add, add/remove, none.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/impart:index/ListItem:ListItem"
                    },
                    "description": "The list items.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The list kind.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this list.\n"
                },
                "subkind": {
                    "type": "string",
                    "description": "The list subkind.\n"
                }
            },
            "requiredInputs": [
                "kind",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering List resources.\n",
                "properties": {
                    "functionality": {
                        "type": "string",
                        "description": "The list functionality. Allowed values are add, add/remove, none.\n"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/impart:index/ListItem:ListItem"
                        },
                        "description": "The list items.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The list kind.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for this list.\n"
                    },
                    "subkind": {
                        "type": "string",
                        "description": "The list subkind.\n"
                    }
                },
                "type": "object"
            }
        },
        "impart:index/logBinding:LogBinding": {
            "description": "Manage a log binding.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as impart from \"@impart-security/pulumi-impart\";\n\n// Create a new log binding\nconst example = new impart.LogBinding(\"example\", {\n    name: \"log_binding_example\",\n    patternType: \"grok\",\n    pattern: \"\u003cpattern\u003e\\n\",\n    logstreamId: \"logstream_id\",\n    specId: resource.impart_spec.example.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_impart as impart\n\n# Create a new log binding\nexample = impart.LogBinding(\"example\",\n    name=\"log_binding_example\",\n    pattern_type=\"grok\",\n    pattern=\"\u003cpattern\u003e\\n\",\n    logstream_id=\"logstream_id\",\n    spec_id=resource[\"impart_spec\"][\"example\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Impart = Pulumi.Impart;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new log binding\n    var example = new Impart.LogBinding(\"example\", new()\n    {\n        Name = \"log_binding_example\",\n        PatternType = \"grok\",\n        Pattern = @\"\u003cpattern\u003e\n\",\n        LogstreamId = \"logstream_id\",\n        SpecId = resource.Impart_spec.Example.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/impart-security/pulumi-impart/sdk/go/impart\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new log binding\n\t\t_, err := impart.NewLogBinding(ctx, \"example\", \u0026impart.LogBindingArgs{\n\t\t\tName:        pulumi.String(\"log_binding_example\"),\n\t\t\tPatternType: pulumi.String(\"grok\"),\n\t\t\tPattern:     pulumi.String(\"\u003cpattern\u003e\\n\"),\n\t\t\tLogstreamId: pulumi.String(\"logstream_id\"),\n\t\t\tSpecId:      pulumi.Any(resource.Impart_spec.Example.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.impart.LogBinding;\nimport com.pulumi.impart.LogBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new log binding\n        var example = new LogBinding(\"example\", LogBindingArgs.builder()\n            .name(\"log_binding_example\")\n            .patternType(\"grok\")\n            .pattern(\"\"\"\n\u003cpattern\u003e\n            \"\"\")\n            .logstreamId(\"logstream_id\")\n            .specId(resource.impart_spec().example().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new log binding\n  example:\n    type: impart:LogBinding\n    properties:\n      name: log_binding_example\n      patternType: grok\n      # Example patterns\n      #   # for api gateway log format: $context.requestTime \"$context.httpMethod $context.path $context.protocol\" $context.status $context.identity.sourceIp $context.requestId\n      #   # %%{HTTPDATE:timestamp} \"(?:%%{WORD:http_method}|-) (?:%%{GREEDYDATA:request}|-) (?:HTTP/%%{NUMBER:httpversion}|-( )?)\" (?:%%{NUMBER:response_code}|-)\n      #   # for aws loadbalancer access logs\n      #   # %%{TIMESTAMP_ISO8601:timestamp} %%{NOTSPACE:loadbalancer} %%{IP:client_ip}:%{NUMBER:client_port} (?:%{IP:backend_ip}:%{NUMBER:backend_port}|-) %%{NUMBER:request_processing_time} %%{NUMBER:backend_processing_time} %%{NUMBER:response_processing_time} (?:%{NUMBER:response_code}|-) (?:%{NUMBER:backend_status_code}|-) %%{NUMBER:received_bytes} %%{NUMBER:sent_bytes} \"(?:%{WORD:http_method}|-) (?:%{GREEDYDATA:request}|-) (?:HTTP/%{NUMBER:http_version}|-( )?)\" \"%{DATA:user_agent}\"( %%{NOTSPACE:ssl_cipher} %%{NOTSPACE:ssl_protocol})?\n      pattern: |\n        \u003cpattern\u003e\n      logstreamId: logstream_id\n      specId: ${resource.impart_spec.example.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "logstreamId": {
                    "type": "string",
                    "description": "The logstream id for this log binding.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this log binding.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "The grok/json pattern for this log binding.\n"
                },
                "patternType": {
                    "type": "string",
                    "description": "The pattern type for this log binding. Accepted values: grok, json\n"
                },
                "specId": {
                    "type": "string",
                    "description": "The specification id.\n"
                }
            },
            "required": [
                "name",
                "pattern",
                "patternType",
                "specId"
            ],
            "inputProperties": {
                "logstreamId": {
                    "type": "string",
                    "description": "The logstream id for this log binding.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this log binding.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "The grok/json pattern for this log binding.\n"
                },
                "patternType": {
                    "type": "string",
                    "description": "The pattern type for this log binding. Accepted values: grok, json\n"
                },
                "specId": {
                    "type": "string",
                    "description": "The specification id.\n"
                }
            },
            "requiredInputs": [
                "name",
                "pattern",
                "patternType",
                "specId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogBinding resources.\n",
                "properties": {
                    "logstreamId": {
                        "type": "string",
                        "description": "The logstream id for this log binding.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for this log binding.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "The grok/json pattern for this log binding.\n"
                    },
                    "patternType": {
                        "type": "string",
                        "description": "The pattern type for this log binding. Accepted values: grok, json\n"
                    },
                    "specId": {
                        "type": "string",
                        "description": "The specification id.\n"
                    }
                },
                "type": "object"
            }
        },
        "impart:index/monitor:Monitor": {
            "description": "Manage a monitor.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.impart.Monitor;\nimport com.pulumi.impart.MonitorArgs;\nimport com.pulumi.impart.inputs.MonitorConditionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new event monitor\n        var testEvent = new Monitor(\"testEvent\", MonitorArgs.builder()\n            .conditions(MonitorConditionArgs.builder()\n                .comparator(\"gt\")\n                .delay(0)\n                .details(MonitorConditionDetailsArgs.builder()\n                    .action(\"api_access_token_created\")\n                    .actorType(\"user_id\")\n                    .subjectType(\"api_access_token_id\")\n                    .type(\"event\")\n                    .build())\n                .threshold(1)\n                .time_period(60000)\n                .build())\n            .description(\"test event monitor\")\n            .name(\"terraform_event_monitor\")\n            .notificationTemplateIds(\"\u003cnotification_template_id\u003e\")\n            .build());\n\n        // Create a new metric monitor\n        var testMetric = new Monitor(\"testMetric\", MonitorArgs.builder()\n            .conditions(MonitorConditionArgs.builder()\n                .comparator(\"lt\")\n                .delay(0)\n                .details(MonitorConditionDetailsArgs.builder()\n                    .tag(\"http-request\")\n                    .type(\"metric\")\n                    .build())\n                .threshold(1)\n                .time_period(60000)\n                .build())\n            .description(\"test event monitor\")\n            .name(\"terraform_event_monitor\")\n            .notificationTemplateIds(\"\u003cnotification_template_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new event monitor\n  testEvent:\n    type: impart:Monitor\n    properties:\n      conditions:\n        - comparator: gt\n          delay: 0\n          details:\n            - action: api_access_token_created\n              actorType: user_id\n              subjectType: api_access_token_id\n              type: event\n          threshold: 1\n          time_period: 60000\n      description: test event monitor\n      name: terraform_event_monitor\n      notificationTemplateIds:\n        - \u003cnotification_template_id\u003e\n  # Create a new metric monitor\n  testMetric:\n    type: impart:Monitor\n    properties:\n      conditions:\n        - comparator: lt\n          delay: 0\n          details:\n            - tag: http-request\n              type: metric\n          threshold: 1\n          time_period: 60000\n      description: test event monitor\n      name: terraform_event_monitor\n      notificationTemplateIds:\n        - \u003cnotification_template_id\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/impart:index/MonitorCondition:MonitorCondition"
                    },
                    "description": "An array of conditions for which the monitor will trigger.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for this monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this monitor.\n"
                },
                "notificationTemplateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of notification template ids for the templates that will send notifications to their respective connectors.\n"
                }
            },
            "required": [
                "conditions",
                "description",
                "name",
                "notificationTemplateIds"
            ],
            "inputProperties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/impart:index/MonitorCondition:MonitorCondition"
                    },
                    "description": "An array of conditions for which the monitor will trigger.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for this monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this monitor.\n"
                },
                "notificationTemplateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of notification template ids for the templates that will send notifications to their respective connectors.\n"
                }
            },
            "requiredInputs": [
                "conditions",
                "description",
                "name",
                "notificationTemplateIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Monitor resources.\n",
                "properties": {
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/impart:index/MonitorCondition:MonitorCondition"
                        },
                        "description": "An array of conditions for which the monitor will trigger.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for this monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for this monitor.\n"
                    },
                    "notificationTemplateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of notification template ids for the templates that will send notifications to their respective connectors.\n"
                    }
                },
                "type": "object"
            }
        },
        "impart:index/notificationTemplate:NotificationTemplate": {
            "description": "Manage an notification template.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as impart from \"@impart-security/pulumi-impart\";\n\n// Create a new notification template\nconst example = new impart.NotificationTemplate(\"example\", {\n    connectorId: \"\u003cexample_connector.id\u003e\",\n    destinations: [\"test-destination-id\"],\n    name: \"notification_template_example\",\n    payload: \"This is a test message payload\",\n    subject: \"Test subject\",\n});\n```\n```python\nimport pulumi\nimport pulumi_impart as impart\n\n# Create a new notification template\nexample = impart.NotificationTemplate(\"example\",\n    connector_id=\"\u003cexample_connector.id\u003e\",\n    destinations=[\"test-destination-id\"],\n    name=\"notification_template_example\",\n    payload=\"This is a test message payload\",\n    subject=\"Test subject\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Impart = Pulumi.Impart;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new notification template\n    var example = new Impart.NotificationTemplate(\"example\", new()\n    {\n        ConnectorId = \"\u003cexample_connector.id\u003e\",\n        Destinations = new[]\n        {\n            \"test-destination-id\",\n        },\n        Name = \"notification_template_example\",\n        Payload = \"This is a test message payload\",\n        Subject = \"Test subject\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/impart-security/pulumi-impart/sdk/go/impart\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new notification template\n\t\t_, err := impart.NewNotificationTemplate(ctx, \"example\", \u0026impart.NotificationTemplateArgs{\n\t\t\tConnectorId: pulumi.String(\"\u003cexample_connector.id\u003e\"),\n\t\t\tDestinations: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"test-destination-id\"),\n\t\t\t},\n\t\t\tName:    pulumi.String(\"notification_template_example\"),\n\t\t\tPayload: pulumi.String(\"This is a test message payload\"),\n\t\t\tSubject: pulumi.String(\"Test subject\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.impart.NotificationTemplate;\nimport com.pulumi.impart.NotificationTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new notification template\n        var example = new NotificationTemplate(\"example\", NotificationTemplateArgs.builder()\n            .connectorId(\"\u003cexample_connector.id\u003e\")\n            .destinations(\"test-destination-id\")\n            .name(\"notification_template_example\")\n            .payload(\"This is a test message payload\")\n            .subject(\"Test subject\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new notification template\n  example:\n    type: impart:NotificationTemplate\n    properties:\n      connectorId: \u003cexample_connector.id\u003e\n      destinations:\n        - test-destination-id\n      name: notification_template_example\n      payload: This is a test message payload\n      subject: Test subject\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "connectorId": {
                    "type": "string",
                    "description": "The connector id.\n"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of destination ids to which the payloads will be sent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this notification template.\n"
                },
                "payload": {
                    "type": "string",
                    "description": "The payload message that will be sent to the Third Party API.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The subject message that will be sent to the Third Party API.\n"
                }
            },
            "required": [
                "connectorId",
                "destinations",
                "name",
                "payload",
                "subject"
            ],
            "inputProperties": {
                "connectorId": {
                    "type": "string",
                    "description": "The connector id.\n"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of destination ids to which the payloads will be sent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this notification template.\n"
                },
                "payload": {
                    "type": "string",
                    "description": "The payload message that will be sent to the Third Party API.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The subject message that will be sent to the Third Party API.\n"
                }
            },
            "requiredInputs": [
                "connectorId",
                "destinations",
                "name",
                "payload",
                "subject"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationTemplate resources.\n",
                "properties": {
                    "connectorId": {
                        "type": "string",
                        "description": "The connector id.\n"
                    },
                    "destinations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of destination ids to which the payloads will be sent.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for this notification template.\n"
                    },
                    "payload": {
                        "type": "string",
                        "description": "The payload message that will be sent to the Third Party API.\n"
                    },
                    "subject": {
                        "type": "string",
                        "description": "The subject message that will be sent to the Third Party API.\n"
                    }
                },
                "type": "object"
            }
        },
        "impart:index/ruleScript:RuleScript": {
            "description": "Manage a rule script.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as impart from \"@impart-security/pulumi-impart\";\n\n// Create a new rule script\nconst example = new impart.RuleScript(\"example\", {\n    name: \"example\",\n    disabled: false,\n    description: \"Rule description\",\n    sourceFile: `${path.module}/rule.js`,\n    sourceHash: \"\u003csha256 hash for the source_file content\u003e\",\n});\n// Create a new rule script with content\nconst exampleContent = new impart.RuleScript(\"exampleContent\", {\n    name: \"example\",\n    disabled: false,\n    description: \"Rule description\",\n    content: fs.readFileSync(`${path.module}/rule.js`, \"utf8\"),\n});\n```\n```python\nimport pulumi\nimport pulumi_impart as impart\n\n# Create a new rule script\nexample = impart.RuleScript(\"example\",\n    name=\"example\",\n    disabled=False,\n    description=\"Rule description\",\n    source_file=f\"{path['module']}/rule.js\",\n    source_hash=\"\u003csha256 hash for the source_file content\u003e\")\n# Create a new rule script with content\nexample_content = impart.RuleScript(\"exampleContent\",\n    name=\"example\",\n    disabled=False,\n    description=\"Rule description\",\n    content=(lambda path: open(path).read())(f\"{path['module']}/rule.js\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Impart = Pulumi.Impart;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rule script\n    var example = new Impart.RuleScript(\"example\", new()\n    {\n        Name = \"example\",\n        Disabled = false,\n        Description = \"Rule description\",\n        SourceFile = $\"{path.Module}/rule.js\",\n        SourceHash = \"\u003csha256 hash for the source_file content\u003e\",\n    });\n\n    // Create a new rule script with content\n    var exampleContent = new Impart.RuleScript(\"exampleContent\", new()\n    {\n        Name = \"example\",\n        Disabled = false,\n        Description = \"Rule description\",\n        Content = File.ReadAllText($\"{path.Module}/rule.js\"),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/impart-security/pulumi-impart/sdk/go/impart\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rule script\n\t\t_, err := impart.NewRuleScript(ctx, \"example\", \u0026impart.RuleScriptArgs{\n\t\t\tName:        pulumi.String(\"example\"),\n\t\t\tDisabled:    pulumi.Bool(false),\n\t\t\tDescription: pulumi.String(\"Rule description\"),\n\t\t\tSourceFile:  pulumi.String(fmt.Sprintf(\"%v/rule.js\", path.Module)),\n\t\t\tSourceHash:  pulumi.String(\"\u003csha256 hash for the source_file content\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rule script with content\n\t\t_, err = impart.NewRuleScript(ctx, \"exampleContent\", \u0026impart.RuleScriptArgs{\n\t\t\tName:        pulumi.String(\"example\"),\n\t\t\tDisabled:    pulumi.Bool(false),\n\t\t\tDescription: pulumi.String(\"Rule description\"),\n\t\t\tContent:     readFileOrPanic(fmt.Sprintf(\"%v/rule.js\", path.Module)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.impart.RuleScript;\nimport com.pulumi.impart.RuleScriptArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rule script\n        var example = new RuleScript(\"example\", RuleScriptArgs.builder()\n            .name(\"example\")\n            .disabled(false)\n            .description(\"Rule description\")\n            .sourceFile(String.format(\"%s/rule.js\", path.module()))\n            .sourceHash(\"\u003csha256 hash for the source_file content\u003e\")\n            .build());\n\n        // Create a new rule script with content\n        var exampleContent = new RuleScript(\"exampleContent\", RuleScriptArgs.builder()\n            .name(\"example\")\n            .disabled(false)\n            .description(\"Rule description\")\n            .content(Files.readString(Paths.get(String.format(\"%s/rule.js\", path.module()))))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rule script\n  example:\n    type: impart:RuleScript\n    properties:\n      name: example\n      disabled: false\n      description: Rule description\n      sourceFile: ${path.module}/rule.js\n      sourceHash: \u003csha256 hash for the source_file content\u003e\n  # Create a new rule script with content\n  exampleContent:\n    type: impart:RuleScript\n    properties:\n      name: example\n      disabled: false\n      description: Rule description\n      content:\n        fn::readFile: ${path.module}/rule.js\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The rule body content.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for this rule script.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Set true to disable the rule script.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this rule script.\n"
                },
                "sourceFile": {
                    "type": "string",
                    "description": "The rule source file.\n"
                },
                "sourceHash": {
                    "type": "string",
                    "description": "The rule source hash.\n"
                }
            },
            "required": [
                "disabled",
                "name"
            ],
            "inputProperties": {
                "content": {
                    "type": "string",
                    "description": "The rule body content.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for this rule script.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Set true to disable the rule script.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for this rule script.\n"
                },
                "sourceFile": {
                    "type": "string",
                    "description": "The rule source file.\n"
                },
                "sourceHash": {
                    "type": "string",
                    "description": "The rule source hash.\n"
                }
            },
            "requiredInputs": [
                "disabled",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RuleScript resources.\n",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "The rule body content.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for this rule script.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Set true to disable the rule script.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for this rule script.\n"
                    },
                    "sourceFile": {
                        "type": "string",
                        "description": "The rule source file.\n"
                    },
                    "sourceHash": {
                        "type": "string",
                        "description": "The rule source hash.\n"
                    }
                },
                "type": "object"
            }
        },
        "impart:index/ruleScriptDependencies:RuleScriptDependencies": {
            "description": "Manage rule script dependencies. There should only ever be one instance of this resource in a workspace at once, because it manages rule script dependencies at an organization level.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.impart.RuleScriptDependencies;\nimport com.pulumi.impart.RuleScriptDependenciesArgs;\nimport com.pulumi.impart.inputs.RuleScriptDependenciesDependencyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new RuleScriptDependencies(\"example\", RuleScriptDependenciesArgs.builder()\n            .dependencies(RuleScriptDependenciesDependencyArgs.builder()\n%!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression))\n                .build());\n\n        }\n}\n```\n```yaml\nresources:\n  example:\n    type: impart:RuleScriptDependencies\n    properties:\n      dependencies:\n        - rule_script_id: \u003cexample_1.id\u003e\n          depends_on_rule_script_ids:\n            - \u003cexample_2.id\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "dependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/impart:index/RuleScriptDependenciesDependency:RuleScriptDependenciesDependency"
                    },
                    "description": "An array of rule scripts and the other ids of the rules they depend on before executing.\n"
                }
            },
            "required": [
                "dependencies"
            ],
            "inputProperties": {
                "dependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/impart:index/RuleScriptDependenciesDependency:RuleScriptDependenciesDependency"
                    },
                    "description": "An array of rule scripts and the other ids of the rules they depend on before executing.\n"
                }
            },
            "requiredInputs": [
                "dependencies"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RuleScriptDependencies resources.\n",
                "properties": {
                    "dependencies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/impart:index/RuleScriptDependenciesDependency:RuleScriptDependenciesDependency"
                        },
                        "description": "An array of rule scripts and the other ids of the rules they depend on before executing.\n"
                    }
                },
                "type": "object"
            }
        },
        "impart:index/spec:Spec": {
            "description": "Manage a specification.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as impart from \"@impart-security/pulumi-impart\";\n\n// Create a new specification\nconst example = new impart.Spec(\"example\", {\n    name: \"spec_example\",\n    sourceFile: `${path.module}/spec.yaml`,\n    sourceHash: \"\u003csha256 hash for the source_file content\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_impart as impart\n\n# Create a new specification\nexample = impart.Spec(\"example\",\n    name=\"spec_example\",\n    source_file=f\"{path['module']}/spec.yaml\",\n    source_hash=\"\u003csha256 hash for the source_file content\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Impart = Pulumi.Impart;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new specification\n    var example = new Impart.Spec(\"example\", new()\n    {\n        Name = \"spec_example\",\n        SourceFile = $\"{path.Module}/spec.yaml\",\n        SourceHash = \"\u003csha256 hash for the source_file content\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/impart-security/pulumi-impart/sdk/go/impart\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new specification\n\t\t_, err := impart.NewSpec(ctx, \"example\", \u0026impart.SpecArgs{\n\t\t\tName:       pulumi.String(\"spec_example\"),\n\t\t\tSourceFile: pulumi.String(fmt.Sprintf(\"%v/spec.yaml\", path.Module)),\n\t\t\tSourceHash: pulumi.String(\"\u003csha256 hash for the source_file content\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.impart.Spec;\nimport com.pulumi.impart.SpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new specification\n        var example = new Spec(\"example\", SpecArgs.builder()\n            .name(\"spec_example\")\n            .sourceFile(String.format(\"%s/spec.yaml\", path.module()))\n            .sourceHash(\"\u003csha256 hash for the source_file content\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new specification\n  example:\n    type: impart:Spec\n    properties:\n      name: spec_example\n      sourceFile: ${path.module}/spec.yaml\n      sourceHash: \u003csha256 hash for the source_file content\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#!/bin/bash\n\n```sh\n$ pulumi import impart:index/spec:Spec example \"\u003cid\u003e\"\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for this specification.\n"
                },
                "sourceFile": {
                    "type": "string",
                    "description": "The specification file.\n"
                },
                "sourceHash": {
                    "type": "string",
                    "description": "The specification source hash.\n"
                }
            },
            "required": [
                "name",
                "sourceFile"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name for this specification.\n"
                },
                "sourceFile": {
                    "type": "string",
                    "description": "The specification file.\n"
                },
                "sourceHash": {
                    "type": "string",
                    "description": "The specification source hash.\n"
                }
            },
            "requiredInputs": [
                "name",
                "sourceFile"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Spec resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name for this specification.\n"
                    },
                    "sourceFile": {
                        "type": "string",
                        "description": "The specification file.\n"
                    },
                    "sourceHash": {
                        "type": "string",
                        "description": "The specification source hash.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "impart:index/getConnector:GetConnector": {
            "description": "Manage a connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as impart from \"@pulumi/impart\";\n\nconst exampleConnector = impart.GetConnector({\n    id: \"\u003cid\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_impart as impart\n\nexample_connector = impart.get_connector(id=\"\u003cid\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Impart = Pulumi.Impart;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleConnector = Impart.GetConnector.Invoke(new()\n    {\n        Id = \"\u003cid\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/impart-security/pulumi-impart/sdk/go/impart\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := impart.GetConnector(ctx, \u0026impart.GetConnectorArgs{\n\t\t\tId: \"\u003cid\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.impart.ImpartFunctions;\nimport com.pulumi.impart.inputs.GetConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleConnector = ImpartFunctions.GetConnector(GetConnectorArgs.builder()\n            .id(\"\u003cid\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleConnector:\n    fn::invoke:\n      Function: impart:GetConnector\n      Arguments:\n        id: \u003cid\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetConnector.\n",
                "properties": {
                    "connectorTypeId": {
                        "type": "string",
                        "description": "ID of the connector type (eg. ID for our Slack or Jira connector types).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Identifier for this connector.\n"
                    },
                    "isConnected": {
                        "type": "boolean",
                        "description": "Whether or not the connector is authenticated via OAuth2.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for this connector.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetConnector.\n",
                "properties": {
                    "connectorTypeId": {
                        "type": "string",
                        "description": "ID of the connector type (eg. ID for our Slack or Jira connector types).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Identifier for this connector.\n"
                    },
                    "isConnected": {
                        "type": "boolean",
                        "description": "Whether or not the connector is authenticated via OAuth2.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for this connector.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "impart:index/getSpec:GetSpec": {
            "description": "Manage a specification.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as impart from \"@pulumi/impart\";\n\nconst example = impart.GetSpec({\n    id: \"\u003cid\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_impart as impart\n\nexample = impart.get_spec(id=\"\u003cid\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Impart = Pulumi.Impart;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Impart.GetSpec.Invoke(new()\n    {\n        Id = \"\u003cid\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/impart-security/pulumi-impart/sdk/go/impart\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := impart.GetSpec(ctx, \u0026impart.LookupSpecArgs{\n\t\t\tId: \"\u003cid\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.impart.ImpartFunctions;\nimport com.pulumi.impart.inputs.GetSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ImpartFunctions.GetSpec(GetSpecArgs.builder()\n            .id(\"\u003cid\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: impart:GetSpec\n      Arguments:\n        id: \u003cid\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetSpec.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Identifier for this specification.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetSpec.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Identifier for this specification.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for this specification.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name"
                ]
            }
        }
    }
}